// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package protocol

import (
	"bytes"
	"fmt"

	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

// Attributes:
//  - ErrCode: 错误码
//  - ErrMsg: 错误内容
type Error struct {
	ErrCode *int32  `thrift:"errCode,1" json:"errCode,omitempty"`
	ErrMsg  *string `thrift:"errMsg,2" json:"errMsg,omitempty"`
}

func NewError() *Error {
	return &Error{}
}

var Error_ErrCode_DEFAULT int32

func (p *Error) GetErrCode() int32 {
	if !p.IsSetErrCode() {
		return Error_ErrCode_DEFAULT
	}
	return *p.ErrCode
}

var Error_ErrMsg_DEFAULT string

func (p *Error) GetErrMsg() string {
	if !p.IsSetErrMsg() {
		return Error_ErrMsg_DEFAULT
	}
	return *p.ErrMsg
}
func (p *Error) IsSetErrCode() bool {
	return p.ErrCode != nil
}

func (p *Error) IsSetErrMsg() bool {
	return p.ErrMsg != nil
}

func (p *Error) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Error) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ErrCode = &v
	}
	return nil
}

func (p *Error) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ErrMsg = &v
	}
	return nil
}

func (p *Error) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Error"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Error) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrCode() {
		if err := oprot.WriteFieldBegin("errCode", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errCode: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ErrCode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.errCode (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errCode: ", p), err)
		}
	}
	return err
}

func (p *Error) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrMsg() {
		if err := oprot.WriteFieldBegin("errMsg", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:errMsg: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ErrMsg)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.errMsg (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:errMsg: ", p), err)
		}
	}
	return err
}

func (p *Error) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Error(%+v)", *p)
}

// Attributes:
//  - Key: 键
//  - Value: 值
type Node struct {
	Key   *string `thrift:"key,1" json:"key,omitempty"`
	Value *string `thrift:"value,2" json:"value,omitempty"`
}

func NewNode() *Node {
	return &Node{}
}

var Node_Key_DEFAULT string

func (p *Node) GetKey() string {
	if !p.IsSetKey() {
		return Node_Key_DEFAULT
	}
	return *p.Key
}

var Node_Value_DEFAULT string

func (p *Node) GetValue() string {
	if !p.IsSetValue() {
		return Node_Value_DEFAULT
	}
	return *p.Value
}
func (p *Node) IsSetKey() bool {
	return p.Key != nil
}

func (p *Node) IsSetValue() bool {
	return p.Value != nil
}

func (p *Node) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Node) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = &v
	}
	return nil
}

func (p *Node) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Value = &v
	}
	return nil
}

func (p *Node) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Node"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Node) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetKey() {
		if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Key)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
		}
	}
	return err
}

func (p *Node) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Value)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err)
		}
	}
	return err
}

func (p *Node) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Node(%+v)", *p)
}

// Attributes:
//  - ID: id，返回所要回执协议的线程id
//  - AckType: 类型，自定义 如：ping，message等
//  - AckStatus: 状态，如成功，失败等
//  - ExtraList: 附加信息
//  - Err: 错误信息
//  - ExtraMap
type AckBean struct {
	ID        *string           `thrift:"id,1" json:"id,omitempty"`
	AckType   *string           `thrift:"ackType,2" json:"ackType,omitempty"`
	AckStatus *string           `thrift:"ackStatus,3" json:"ackStatus,omitempty"`
	ExtraList []*Node           `thrift:"extraList,4" json:"extraList,omitempty"`
	Err       *Error            `thrift:"err,5" json:"err,omitempty"`
	ExtraMap  map[string]string `thrift:"extraMap,6" json:"extraMap,omitempty"`
}

func NewAckBean() *AckBean {
	return &AckBean{}
}

var AckBean_ID_DEFAULT string

func (p *AckBean) GetID() string {
	if !p.IsSetID() {
		return AckBean_ID_DEFAULT
	}
	return *p.ID
}

var AckBean_AckType_DEFAULT string

func (p *AckBean) GetAckType() string {
	if !p.IsSetAckType() {
		return AckBean_AckType_DEFAULT
	}
	return *p.AckType
}

var AckBean_AckStatus_DEFAULT string

func (p *AckBean) GetAckStatus() string {
	if !p.IsSetAckStatus() {
		return AckBean_AckStatus_DEFAULT
	}
	return *p.AckStatus
}

var AckBean_ExtraList_DEFAULT []*Node

func (p *AckBean) GetExtraList() []*Node {
	return p.ExtraList
}

var AckBean_Err_DEFAULT *Error

func (p *AckBean) GetErr() *Error {
	if !p.IsSetErr() {
		return AckBean_Err_DEFAULT
	}
	return p.Err
}

var AckBean_ExtraMap_DEFAULT map[string]string

func (p *AckBean) GetExtraMap() map[string]string {
	return p.ExtraMap
}
func (p *AckBean) IsSetID() bool {
	return p.ID != nil
}

func (p *AckBean) IsSetAckType() bool {
	return p.AckType != nil
}

func (p *AckBean) IsSetAckStatus() bool {
	return p.AckStatus != nil
}

func (p *AckBean) IsSetExtraList() bool {
	return p.ExtraList != nil
}

func (p *AckBean) IsSetErr() bool {
	return p.Err != nil
}

func (p *AckBean) IsSetExtraMap() bool {
	return p.ExtraMap != nil
}

func (p *AckBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AckBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = &v
	}
	return nil
}

func (p *AckBean) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AckType = &v
	}
	return nil
}

func (p *AckBean) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.AckStatus = &v
	}
	return nil
}

func (p *AckBean) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Node, 0, size)
	p.ExtraList = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &Node{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.ExtraList = append(p.ExtraList, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AckBean) readField5(iprot thrift.TProtocol) error {
	p.Err = &Error{}
	if err := p.Err.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
	}
	return nil
}

func (p *AckBean) readField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.ExtraMap = tMap
	for i := 0; i < size; i++ {
		var _key1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key1 = v
		}
		var _val2 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val2 = v
		}
		p.ExtraMap[_key1] = _val2
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AckBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AckBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AckBean) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
		}
	}
	return err
}

func (p *AckBean) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAckType() {
		if err := oprot.WriteFieldBegin("ackType", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ackType: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AckType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ackType (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ackType: ", p), err)
		}
	}
	return err
}

func (p *AckBean) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAckStatus() {
		if err := oprot.WriteFieldBegin("ackStatus", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ackStatus: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AckStatus)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ackStatus (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ackStatus: ", p), err)
		}
	}
	return err
}

func (p *AckBean) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtraList() {
		if err := oprot.WriteFieldBegin("extraList", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extraList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ExtraList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ExtraList {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extraList: ", p), err)
		}
	}
	return err
}

func (p *AckBean) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:err: ", p), err)
		}
		if err := p.Err.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:err: ", p), err)
		}
	}
	return err
}

func (p *AckBean) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtraMap() {
		if err := oprot.WriteFieldBegin("extraMap", thrift.MAP, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:extraMap: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.ExtraMap {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:extraMap: ", p), err)
		}
	}
	return err
}

func (p *AckBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AckBean(%+v)", *p)
}

// Attributes:
//  - Chl: 渠道
//  - Platform: 平台
//  - Version: version 客户端协议版本
type HBean struct {
	Chl      int32  `thrift:"chl,1,required" json:"chl"`
	Platform *int32 `thrift:"platform,2" json:"platform,omitempty"`
	Version  int16  `thrift:"version,3,required" json:"version"`
}

func NewHBean() *HBean {
	return &HBean{}
}

func (p *HBean) GetChl() int32 {
	return p.Chl
}

var HBean_Platform_DEFAULT int32

func (p *HBean) GetPlatform() int32 {
	if !p.IsSetPlatform() {
		return HBean_Platform_DEFAULT
	}
	return *p.Platform
}

func (p *HBean) GetVersion() int16 {
	return p.Version
}
func (p *HBean) IsSetPlatform() bool {
	return p.Platform != nil
}

func (p *HBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetChl bool = false
	var issetVersion bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetChl = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetVersion = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetChl {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Chl is not set"))
	}
	if !issetVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Version is not set"))
	}
	return nil
}

func (p *HBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Chl = v
	}
	return nil
}

func (p *HBean) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Platform = &v
	}
	return nil
}

func (p *HBean) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *HBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HBean) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chl", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chl: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Chl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chl (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chl: ", p), err)
	}
	return err
}

func (p *HBean) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlatform() {
		if err := oprot.WriteFieldBegin("platform", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:platform: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Platform)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.platform (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:platform: ", p), err)
		}
	}
	return err
}

func (p *HBean) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.I16, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:version: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Version)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.version (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:version: ", p), err)
	}
	return err
}

func (p *HBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HBean(%+v)", *p)
}

// Attributes:
//  - Timestamp: 服务器时间
//  - Version: 版本
//  - Lang: 语言
//  - ExtraList: 附加信息
//  - ExtraMap
//  - Interflow: 消息合流
//  - TLS: tls
type Param struct {
	Timestamp *string           `thrift:"XXXstamp,1" json:"XXXstamp,omitempty"`
	Version   *int16            `thrift:"version,2" json:"version,omitempty"`
	Lang      *string           `thrift:"lang,3" json:"lang,omitempty"`
	ExtraList []*Node           `thrift:"extraList,4" json:"extraList,omitempty"`
	ExtraMap  map[string]string `thrift:"extraMap,5" json:"extraMap,omitempty"`
	Interflow *string           `thrift:"interflow,6" json:"interflow,omitempty"`
	TLS       *string           `thrift:"tls,7" json:"tls,omitempty"`
}

func NewParam() *Param {
	return &Param{}
}

var Param_Timestamp_DEFAULT string

func (p *Param) GetTimestamp() string {
	if !p.IsSetTimestamp() {
		return Param_Timestamp_DEFAULT
	}
	return *p.Timestamp
}

var Param_Version_DEFAULT int16

func (p *Param) GetVersion() int16 {
	if !p.IsSetVersion() {
		return Param_Version_DEFAULT
	}
	return *p.Version
}

var Param_Lang_DEFAULT string

func (p *Param) GetLang() string {
	if !p.IsSetLang() {
		return Param_Lang_DEFAULT
	}
	return *p.Lang
}

var Param_ExtraList_DEFAULT []*Node

func (p *Param) GetExtraList() []*Node {
	return p.ExtraList
}

var Param_ExtraMap_DEFAULT map[string]string

func (p *Param) GetExtraMap() map[string]string {
	return p.ExtraMap
}

var Param_Interflow_DEFAULT string

func (p *Param) GetInterflow() string {
	if !p.IsSetInterflow() {
		return Param_Interflow_DEFAULT
	}
	return *p.Interflow
}

var Param_TLS_DEFAULT string

func (p *Param) GetTLS() string {
	if !p.IsSetTLS() {
		return Param_TLS_DEFAULT
	}
	return *p.TLS
}
func (p *Param) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *Param) IsSetVersion() bool {
	return p.Version != nil
}

func (p *Param) IsSetLang() bool {
	return p.Lang != nil
}

func (p *Param) IsSetExtraList() bool {
	return p.ExtraList != nil
}

func (p *Param) IsSetExtraMap() bool {
	return p.ExtraMap != nil
}

func (p *Param) IsSetInterflow() bool {
	return p.Interflow != nil
}

func (p *Param) IsSetTLS() bool {
	return p.TLS != nil
}

func (p *Param) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Param) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Timestamp = &v
	}
	return nil
}

func (p *Param) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Version = &v
	}
	return nil
}

func (p *Param) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Lang = &v
	}
	return nil
}

func (p *Param) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Node, 0, size)
	p.ExtraList = tSlice
	for i := 0; i < size; i++ {
		_elem3 := &Node{}
		if err := _elem3.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
		}
		p.ExtraList = append(p.ExtraList, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Param) readField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.ExtraMap = tMap
	for i := 0; i < size; i++ {
		var _key4 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key4 = v
		}
		var _val5 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val5 = v
		}
		p.ExtraMap[_key4] = _val5
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Param) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Interflow = &v
	}
	return nil
}

func (p *Param) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.TLS = &v
	}
	return nil
}

func (p *Param) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Param"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Param) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("XXXstamp", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:XXXstamp: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Timestamp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.XXXstamp (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:XXXstamp: ", p), err)
		}
	}
	return err
}

func (p *Param) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err := oprot.WriteFieldBegin("version", thrift.I16, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:version: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.Version)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.version (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:version: ", p), err)
		}
	}
	return err
}

func (p *Param) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLang() {
		if err := oprot.WriteFieldBegin("lang", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lang: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Lang)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lang (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lang: ", p), err)
		}
	}
	return err
}

func (p *Param) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtraList() {
		if err := oprot.WriteFieldBegin("extraList", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extraList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ExtraList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ExtraList {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extraList: ", p), err)
		}
	}
	return err
}

func (p *Param) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtraMap() {
		if err := oprot.WriteFieldBegin("extraMap", thrift.MAP, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:extraMap: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.ExtraMap {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:extraMap: ", p), err)
		}
	}
	return err
}

func (p *Param) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetInterflow() {
		if err := oprot.WriteFieldBegin("interflow", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:interflow: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Interflow)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.interflow (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:interflow: ", p), err)
		}
	}
	return err
}

func (p *Param) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTLS() {
		if err := oprot.WriteFieldBegin("tls", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:tls: ", p), err)
		}
		if err := oprot.WriteString(string(*p.TLS)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.tls (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:tls: ", p), err)
		}
	}
	return err
}

func (p *Param) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Param(%+v)", *p)
}

// Attributes:
//  - Timestamp: 时间戳    (毫秒)
//  - FormatXXX: 格式化时间
type Time struct {
	Timestamp *string `thrift:"XXXstamp,1" json:"XXXstamp,omitempty"`
	FormatXXX *string `thrift:"formatXXX,2" json:"formatXXX,omitempty"`
}

func NewTime() *Time {
	return &Time{}
}

var Time_Timestamp_DEFAULT string

func (p *Time) GetTimestamp() string {
	if !p.IsSetTimestamp() {
		return Time_Timestamp_DEFAULT
	}
	return *p.Timestamp
}

var Time_FormatXXX_DEFAULT string

func (p *Time) GetFormatXXX() string {
	if !p.IsSetFormatXXX() {
		return Time_FormatXXX_DEFAULT
	}
	return *p.FormatXXX
}
func (p *Time) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *Time) IsSetFormatXXX() bool {
	return p.FormatXXX != nil
}

func (p *Time) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Time) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Timestamp = &v
	}
	return nil
}

func (p *Time) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.FormatXXX = &v
	}
	return nil
}

func (p *Time) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Time"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Time) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("XXXstamp", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:XXXstamp: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Timestamp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.XXXstamp (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:XXXstamp: ", p), err)
		}
	}
	return err
}

func (p *Time) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFormatXXX() {
		if err := oprot.WriteFieldBegin("formatXXX", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:formatXXX: ", p), err)
		}
		if err := oprot.WriteString(string(*p.FormatXXX)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.formatXXX (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:formatXXX: ", p), err)
		}
	}
	return err
}

func (p *Time) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Time(%+v)", *p)
}

// Attributes:
//  - Country: 国家
//  - Province: 省
//  - City: 市
//  - ExtraList: 附加信息：如区，镇，乡等
//  - ExtraMap
type Area struct {
	Country   *string           `thrift:"country,1" json:"country,omitempty"`
	Province  *string           `thrift:"province,2" json:"province,omitempty"`
	City      *string           `thrift:"city,3" json:"city,omitempty"`
	ExtraList []*Node           `thrift:"extraList,4" json:"extraList,omitempty"`
	ExtraMap  map[string]string `thrift:"extraMap,5" json:"extraMap,omitempty"`
}

func NewArea() *Area {
	return &Area{}
}

var Area_Country_DEFAULT string

func (p *Area) GetCountry() string {
	if !p.IsSetCountry() {
		return Area_Country_DEFAULT
	}
	return *p.Country
}

var Area_Province_DEFAULT string

func (p *Area) GetProvince() string {
	if !p.IsSetProvince() {
		return Area_Province_DEFAULT
	}
	return *p.Province
}

var Area_City_DEFAULT string

func (p *Area) GetCity() string {
	if !p.IsSetCity() {
		return Area_City_DEFAULT
	}
	return *p.City
}

var Area_ExtraList_DEFAULT []*Node

func (p *Area) GetExtraList() []*Node {
	return p.ExtraList
}

var Area_ExtraMap_DEFAULT map[string]string

func (p *Area) GetExtraMap() map[string]string {
	return p.ExtraMap
}
func (p *Area) IsSetCountry() bool {
	return p.Country != nil
}

func (p *Area) IsSetProvince() bool {
	return p.Province != nil
}

func (p *Area) IsSetCity() bool {
	return p.City != nil
}

func (p *Area) IsSetExtraList() bool {
	return p.ExtraList != nil
}

func (p *Area) IsSetExtraMap() bool {
	return p.ExtraMap != nil
}

func (p *Area) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Area) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Country = &v
	}
	return nil
}

func (p *Area) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Province = &v
	}
	return nil
}

func (p *Area) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.City = &v
	}
	return nil
}

func (p *Area) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Node, 0, size)
	p.ExtraList = tSlice
	for i := 0; i < size; i++ {
		_elem6 := &Node{}
		if err := _elem6.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
		}
		p.ExtraList = append(p.ExtraList, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Area) readField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.ExtraMap = tMap
	for i := 0; i < size; i++ {
		var _key7 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key7 = v
		}
		var _val8 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val8 = v
		}
		p.ExtraMap[_key7] = _val8
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Area) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Area"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Area) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCountry() {
		if err := oprot.WriteFieldBegin("country", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:country: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Country)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.country (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:country: ", p), err)
		}
	}
	return err
}

func (p *Area) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetProvince() {
		if err := oprot.WriteFieldBegin("province", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:province: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Province)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.province (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:province: ", p), err)
		}
	}
	return err
}

func (p *Area) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCity() {
		if err := oprot.WriteFieldBegin("city", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:city: ", p), err)
		}
		if err := oprot.WriteString(string(*p.City)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.city (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:city: ", p), err)
		}
	}
	return err
}

func (p *Area) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtraList() {
		if err := oprot.WriteFieldBegin("extraList", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extraList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ExtraList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ExtraList {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extraList: ", p), err)
		}
	}
	return err
}

func (p *Area) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtraMap() {
		if err := oprot.WriteFieldBegin("extraMap", thrift.MAP, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:extraMap: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.ExtraMap {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:extraMap: ", p), err)
		}
	}
	return err
}

func (p *Area) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Area(%+v)", *p)
}

// Attributes:
//  - Name: 登陆名   用户登录号，房间号等
//  - Domain: 域名 用于区分渠道等 appid，appsecret
//  - Resource: 系统 自行约定 如 ： 1IOS，2android，3H5，4WEB 等
//  - Type: normal，group
//  - ExtraList: 附加信息：如传递客户端信息 iphone6，xiaomi，huawei等
//  - ExtraMap
type Tid struct {
	Name      string            `thrift:"name,1,required" json:"name"`
	Domain    *string           `thrift:"domain,2" json:"domain,omitempty"`
	Resource  *string           `thrift:"resource,3" json:"resource,omitempty"`
	Type      *string           `thrift:"type,4" json:"type,omitempty"`
	ExtraList []*Node           `thrift:"extraList,5" json:"extraList,omitempty"`
	ExtraMap  map[string]string `thrift:"extraMap,6" json:"extraMap,omitempty"`
}

func NewTid() *Tid {
	return &Tid{}
}

func (p *Tid) GetName() string {
	return p.Name
}

var Tid_Domain_DEFAULT string

func (p *Tid) GetDomain() string {
	if !p.IsSetDomain() {
		return Tid_Domain_DEFAULT
	}
	return *p.Domain
}

var Tid_Resource_DEFAULT string

func (p *Tid) GetResource() string {
	if !p.IsSetResource() {
		return Tid_Resource_DEFAULT
	}
	return *p.Resource
}

var Tid_Type_DEFAULT string

func (p *Tid) GetType() string {
	if !p.IsSetType() {
		return Tid_Type_DEFAULT
	}
	return *p.Type
}

var Tid_ExtraList_DEFAULT []*Node

func (p *Tid) GetExtraList() []*Node {
	return p.ExtraList
}

var Tid_ExtraMap_DEFAULT map[string]string

func (p *Tid) GetExtraMap() map[string]string {
	return p.ExtraMap
}
func (p *Tid) IsSetDomain() bool {
	return p.Domain != nil
}

func (p *Tid) IsSetResource() bool {
	return p.Resource != nil
}

func (p *Tid) IsSetType() bool {
	return p.Type != nil
}

func (p *Tid) IsSetExtraList() bool {
	return p.ExtraList != nil
}

func (p *Tid) IsSetExtraMap() bool {
	return p.ExtraMap != nil
}

func (p *Tid) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetName bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetName = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"))
	}
	return nil
}

func (p *Tid) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Tid) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Domain = &v
	}
	return nil
}

func (p *Tid) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Resource = &v
	}
	return nil
}

func (p *Tid) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Type = &v
	}
	return nil
}

func (p *Tid) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Node, 0, size)
	p.ExtraList = tSlice
	for i := 0; i < size; i++ {
		_elem9 := &Node{}
		if err := _elem9.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
		}
		p.ExtraList = append(p.ExtraList, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Tid) readField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.ExtraMap = tMap
	for i := 0; i < size; i++ {
		var _key10 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key10 = v
		}
		var _val11 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val11 = v
		}
		p.ExtraMap[_key10] = _val11
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Tid) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Tid"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Tid) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *Tid) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDomain() {
		if err := oprot.WriteFieldBegin("domain", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Domain)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err)
		}
	}
	return err
}

func (p *Tid) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetResource() {
		if err := oprot.WriteFieldBegin("resource", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:resource: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Resource)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.resource (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:resource: ", p), err)
		}
	}
	return err
}

func (p *Tid) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err := oprot.WriteFieldBegin("type", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:type: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Type)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.type (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:type: ", p), err)
		}
	}
	return err
}

func (p *Tid) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtraList() {
		if err := oprot.WriteFieldBegin("extraList", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:extraList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ExtraList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ExtraList {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:extraList: ", p), err)
		}
	}
	return err
}

func (p *Tid) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtraMap() {
		if err := oprot.WriteFieldBegin("extraMap", thrift.MAP, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:extraMap: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.ExtraMap {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:extraMap: ", p), err)
		}
	}
	return err
}

func (p *Tid) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Tid(%+v)", *p)
}

// Attributes:
//  - Tid: 用户bean
//  - Nickname: 昵称
//  - Remarkname: 备注名称
//  - Brithday: 生日     2000-01-01
//  - Gender: 性别  自行约定 如 ：  0不知，1男，2女
//  - Headurl: 头像地址 http://xxx.jpg
//  - Area: 地区
//  - Headbyte: 头像
//  - PhotoBytes: 其他图片
//  - ExtraList: 扩展字段
//  - ExtraMap
type UserBean struct {
	Tid        *Tid              `thrift:"tid,1" json:"tid,omitempty"`
	Nickname   *string           `thrift:"nickname,2" json:"nickname,omitempty"`
	Remarkname *string           `thrift:"remarkname,3" json:"remarkname,omitempty"`
	Brithday   *string           `thrift:"brithday,4" json:"brithday,omitempty"`
	Gender     *int16            `thrift:"gender,5" json:"gender,omitempty"`
	Headurl    *string           `thrift:"headurl,6" json:"headurl,omitempty"`
	Area       *Area             `thrift:"area,7" json:"area,omitempty"`
	Headbyte   []byte            `thrift:"headbyte,8" json:"headbyte,omitempty"`
	PhotoBytes [][]byte          `thrift:"photoBytes,9" json:"photoBytes,omitempty"`
	ExtraList  []*Node           `thrift:"extraList,10" json:"extraList,omitempty"`
	ExtraMap   map[string]string `thrift:"extraMap,11" json:"extraMap,omitempty"`
}

func NewUserBean() *UserBean {
	return &UserBean{}
}

var UserBean_Tid_DEFAULT *Tid

func (p *UserBean) GetTid() *Tid {
	if !p.IsSetTid() {
		return UserBean_Tid_DEFAULT
	}
	return p.Tid
}

var UserBean_Nickname_DEFAULT string

func (p *UserBean) GetNickname() string {
	if !p.IsSetNickname() {
		return UserBean_Nickname_DEFAULT
	}
	return *p.Nickname
}

var UserBean_Remarkname_DEFAULT string

func (p *UserBean) GetRemarkname() string {
	if !p.IsSetRemarkname() {
		return UserBean_Remarkname_DEFAULT
	}
	return *p.Remarkname
}

var UserBean_Brithday_DEFAULT string

func (p *UserBean) GetBrithday() string {
	if !p.IsSetBrithday() {
		return UserBean_Brithday_DEFAULT
	}
	return *p.Brithday
}

var UserBean_Gender_DEFAULT int16

func (p *UserBean) GetGender() int16 {
	if !p.IsSetGender() {
		return UserBean_Gender_DEFAULT
	}
	return *p.Gender
}

var UserBean_Headurl_DEFAULT string

func (p *UserBean) GetHeadurl() string {
	if !p.IsSetHeadurl() {
		return UserBean_Headurl_DEFAULT
	}
	return *p.Headurl
}

var UserBean_Area_DEFAULT *Area

func (p *UserBean) GetArea() *Area {
	if !p.IsSetArea() {
		return UserBean_Area_DEFAULT
	}
	return p.Area
}

var UserBean_Headbyte_DEFAULT []byte

func (p *UserBean) GetHeadbyte() []byte {
	return p.Headbyte
}

var UserBean_PhotoBytes_DEFAULT [][]byte

func (p *UserBean) GetPhotoBytes() [][]byte {
	return p.PhotoBytes
}

var UserBean_ExtraList_DEFAULT []*Node

func (p *UserBean) GetExtraList() []*Node {
	return p.ExtraList
}

var UserBean_ExtraMap_DEFAULT map[string]string

func (p *UserBean) GetExtraMap() map[string]string {
	return p.ExtraMap
}
func (p *UserBean) IsSetTid() bool {
	return p.Tid != nil
}

func (p *UserBean) IsSetNickname() bool {
	return p.Nickname != nil
}

func (p *UserBean) IsSetRemarkname() bool {
	return p.Remarkname != nil
}

func (p *UserBean) IsSetBrithday() bool {
	return p.Brithday != nil
}

func (p *UserBean) IsSetGender() bool {
	return p.Gender != nil
}

func (p *UserBean) IsSetHeadurl() bool {
	return p.Headurl != nil
}

func (p *UserBean) IsSetArea() bool {
	return p.Area != nil
}

func (p *UserBean) IsSetHeadbyte() bool {
	return p.Headbyte != nil
}

func (p *UserBean) IsSetPhotoBytes() bool {
	return p.PhotoBytes != nil
}

func (p *UserBean) IsSetExtraList() bool {
	return p.ExtraList != nil
}

func (p *UserBean) IsSetExtraMap() bool {
	return p.ExtraMap != nil
}

func (p *UserBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserBean) readField1(iprot thrift.TProtocol) error {
	p.Tid = &Tid{}
	if err := p.Tid.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tid), err)
	}
	return nil
}

func (p *UserBean) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Nickname = &v
	}
	return nil
}

func (p *UserBean) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Remarkname = &v
	}
	return nil
}

func (p *UserBean) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Brithday = &v
	}
	return nil
}

func (p *UserBean) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Gender = &v
	}
	return nil
}

func (p *UserBean) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Headurl = &v
	}
	return nil
}

func (p *UserBean) readField7(iprot thrift.TProtocol) error {
	p.Area = &Area{}
	if err := p.Area.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Area), err)
	}
	return nil
}

func (p *UserBean) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Headbyte = v
	}
	return nil
}

func (p *UserBean) readField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]byte, 0, size)
	p.PhotoBytes = tSlice
	for i := 0; i < size; i++ {
		var _elem12 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem12 = v
		}
		p.PhotoBytes = append(p.PhotoBytes, _elem12)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserBean) readField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Node, 0, size)
	p.ExtraList = tSlice
	for i := 0; i < size; i++ {
		_elem13 := &Node{}
		if err := _elem13.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem13), err)
		}
		p.ExtraList = append(p.ExtraList, _elem13)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserBean) readField11(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.ExtraMap = tMap
	for i := 0; i < size; i++ {
		var _key14 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key14 = v
		}
		var _val15 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val15 = v
		}
		p.ExtraMap[_key14] = _val15
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *UserBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserBean) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTid() {
		if err := oprot.WriteFieldBegin("tid", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tid: ", p), err)
		}
		if err := p.Tid.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tid), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tid: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNickname() {
		if err := oprot.WriteFieldBegin("nickname", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nickname: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Nickname)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nickname (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nickname: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemarkname() {
		if err := oprot.WriteFieldBegin("remarkname", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:remarkname: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Remarkname)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.remarkname (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:remarkname: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetBrithday() {
		if err := oprot.WriteFieldBegin("brithday", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:brithday: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Brithday)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.brithday (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:brithday: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetGender() {
		if err := oprot.WriteFieldBegin("gender", thrift.I16, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:gender: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.Gender)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.gender (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:gender: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetHeadurl() {
		if err := oprot.WriteFieldBegin("headurl", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:headurl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Headurl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.headurl (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:headurl: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetArea() {
		if err := oprot.WriteFieldBegin("area", thrift.STRUCT, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:area: ", p), err)
		}
		if err := p.Area.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Area), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:area: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetHeadbyte() {
		if err := oprot.WriteFieldBegin("headbyte", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:headbyte: ", p), err)
		}
		if err := oprot.WriteBinary(p.Headbyte); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.headbyte (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:headbyte: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetPhotoBytes() {
		if err := oprot.WriteFieldBegin("photoBytes", thrift.LIST, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:photoBytes: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.PhotoBytes)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.PhotoBytes {
			if err := oprot.WriteBinary(v); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:photoBytes: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtraList() {
		if err := oprot.WriteFieldBegin("extraList", thrift.LIST, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:extraList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ExtraList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ExtraList {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:extraList: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtraMap() {
		if err := oprot.WriteFieldBegin("extraMap", thrift.MAP, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:extraMap: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.ExtraMap {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:extraMap: ", p), err)
		}
	}
	return err
}

func (p *UserBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserBean(%+v)", *p)
}

// Attributes:
//  - Tid: 房间Tid
//  - FounderTid: 创建人Tid
//  - HostsTid: 主持人Tid
//  - MembersTid: memberTid
//  - Headurl: 头像地址 http://xxx.jpg
//  - RoomName: 房间名称
//  - Desc: 房间说明
//  - CreateTime: 房间创建时间
//  - ExtraList: 扩展字段
//  - ExtraMap
type Room struct {
	Tid        *Tid              `thrift:"tid,1" json:"tid,omitempty"`
	FounderTid *Tid              `thrift:"founderTid,2" json:"founderTid,omitempty"`
	HostsTid   []*Tid            `thrift:"HostsTid,3" json:"HostsTid,omitempty"`
	MembersTid []*Tid            `thrift:"membersTid,4" json:"membersTid,omitempty"`
	Headurl    *string           `thrift:"headurl,5" json:"headurl,omitempty"`
	RoomName   *string           `thrift:"roomName,6" json:"roomName,omitempty"`
	Desc       *string           `thrift:"desc,7" json:"desc,omitempty"`
	CreateTime *Time             `thrift:"createTime,8" json:"createTime,omitempty"`
	ExtraList  []*Node           `thrift:"extraList,9" json:"extraList,omitempty"`
	ExtraMap   map[string]string `thrift:"extraMap,10" json:"extraMap,omitempty"`
}

func NewRoom() *Room {
	return &Room{}
}

var Room_Tid_DEFAULT *Tid

func (p *Room) GetTid() *Tid {
	if !p.IsSetTid() {
		return Room_Tid_DEFAULT
	}
	return p.Tid
}

var Room_FounderTid_DEFAULT *Tid

func (p *Room) GetFounderTid() *Tid {
	if !p.IsSetFounderTid() {
		return Room_FounderTid_DEFAULT
	}
	return p.FounderTid
}

var Room_HostsTid_DEFAULT []*Tid

func (p *Room) GetHostsTid() []*Tid {
	return p.HostsTid
}

var Room_MembersTid_DEFAULT []*Tid

func (p *Room) GetMembersTid() []*Tid {
	return p.MembersTid
}

var Room_Headurl_DEFAULT string

func (p *Room) GetHeadurl() string {
	if !p.IsSetHeadurl() {
		return Room_Headurl_DEFAULT
	}
	return *p.Headurl
}

var Room_RoomName_DEFAULT string

func (p *Room) GetRoomName() string {
	if !p.IsSetRoomName() {
		return Room_RoomName_DEFAULT
	}
	return *p.RoomName
}

var Room_Desc_DEFAULT string

func (p *Room) GetDesc() string {
	if !p.IsSetDesc() {
		return Room_Desc_DEFAULT
	}
	return *p.Desc
}

var Room_CreateTime_DEFAULT *Time

func (p *Room) GetCreateTime() *Time {
	if !p.IsSetCreateTime() {
		return Room_CreateTime_DEFAULT
	}
	return p.CreateTime
}

var Room_ExtraList_DEFAULT []*Node

func (p *Room) GetExtraList() []*Node {
	return p.ExtraList
}

var Room_ExtraMap_DEFAULT map[string]string

func (p *Room) GetExtraMap() map[string]string {
	return p.ExtraMap
}
func (p *Room) IsSetTid() bool {
	return p.Tid != nil
}

func (p *Room) IsSetFounderTid() bool {
	return p.FounderTid != nil
}

func (p *Room) IsSetHostsTid() bool {
	return p.HostsTid != nil
}

func (p *Room) IsSetMembersTid() bool {
	return p.MembersTid != nil
}

func (p *Room) IsSetHeadurl() bool {
	return p.Headurl != nil
}

func (p *Room) IsSetRoomName() bool {
	return p.RoomName != nil
}

func (p *Room) IsSetDesc() bool {
	return p.Desc != nil
}

func (p *Room) IsSetCreateTime() bool {
	return p.CreateTime != nil
}

func (p *Room) IsSetExtraList() bool {
	return p.ExtraList != nil
}

func (p *Room) IsSetExtraMap() bool {
	return p.ExtraMap != nil
}

func (p *Room) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Room) readField1(iprot thrift.TProtocol) error {
	p.Tid = &Tid{}
	if err := p.Tid.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tid), err)
	}
	return nil
}

func (p *Room) readField2(iprot thrift.TProtocol) error {
	p.FounderTid = &Tid{}
	if err := p.FounderTid.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FounderTid), err)
	}
	return nil
}

func (p *Room) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Tid, 0, size)
	p.HostsTid = tSlice
	for i := 0; i < size; i++ {
		_elem16 := &Tid{}
		if err := _elem16.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem16), err)
		}
		p.HostsTid = append(p.HostsTid, _elem16)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Room) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Tid, 0, size)
	p.MembersTid = tSlice
	for i := 0; i < size; i++ {
		_elem17 := &Tid{}
		if err := _elem17.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem17), err)
		}
		p.MembersTid = append(p.MembersTid, _elem17)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Room) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Headurl = &v
	}
	return nil
}

func (p *Room) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.RoomName = &v
	}
	return nil
}

func (p *Room) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Desc = &v
	}
	return nil
}

func (p *Room) readField8(iprot thrift.TProtocol) error {
	p.CreateTime = &Time{}
	if err := p.CreateTime.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CreateTime), err)
	}
	return nil
}

func (p *Room) readField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Node, 0, size)
	p.ExtraList = tSlice
	for i := 0; i < size; i++ {
		_elem18 := &Node{}
		if err := _elem18.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem18), err)
		}
		p.ExtraList = append(p.ExtraList, _elem18)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Room) readField10(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.ExtraMap = tMap
	for i := 0; i < size; i++ {
		var _key19 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key19 = v
		}
		var _val20 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val20 = v
		}
		p.ExtraMap[_key19] = _val20
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Room) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Room"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Room) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTid() {
		if err := oprot.WriteFieldBegin("tid", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tid: ", p), err)
		}
		if err := p.Tid.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tid), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tid: ", p), err)
		}
	}
	return err
}

func (p *Room) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFounderTid() {
		if err := oprot.WriteFieldBegin("founderTid", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:founderTid: ", p), err)
		}
		if err := p.FounderTid.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FounderTid), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:founderTid: ", p), err)
		}
	}
	return err
}

func (p *Room) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetHostsTid() {
		if err := oprot.WriteFieldBegin("HostsTid", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:HostsTid: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HostsTid)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.HostsTid {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:HostsTid: ", p), err)
		}
	}
	return err
}

func (p *Room) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMembersTid() {
		if err := oprot.WriteFieldBegin("membersTid", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:membersTid: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MembersTid)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.MembersTid {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:membersTid: ", p), err)
		}
	}
	return err
}

func (p *Room) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetHeadurl() {
		if err := oprot.WriteFieldBegin("headurl", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:headurl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Headurl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.headurl (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:headurl: ", p), err)
		}
	}
	return err
}

func (p *Room) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetRoomName() {
		if err := oprot.WriteFieldBegin("roomName", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:roomName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.RoomName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.roomName (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:roomName: ", p), err)
		}
	}
	return err
}

func (p *Room) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err := oprot.WriteFieldBegin("desc", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:desc: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Desc)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.desc (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:desc: ", p), err)
		}
	}
	return err
}

func (p *Room) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateTime() {
		if err := oprot.WriteFieldBegin("createTime", thrift.STRUCT, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:createTime: ", p), err)
		}
		if err := p.CreateTime.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CreateTime), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:createTime: ", p), err)
		}
	}
	return err
}

func (p *Room) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtraList() {
		if err := oprot.WriteFieldBegin("extraList", thrift.LIST, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:extraList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ExtraList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ExtraList {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:extraList: ", p), err)
		}
	}
	return err
}

func (p *Room) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtraMap() {
		if err := oprot.WriteFieldBegin("extraMap", thrift.MAP, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:extraMap: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.ExtraMap {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:extraMap: ", p), err)
		}
	}
	return err
}

func (p *Room) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Room(%+v)", *p)
}

// Attributes:
//  - ThreadId: 标识
//  - FromTid
//  - ToTid
//  - Status: subscribe：订阅其他用户的状态  probe：请求获取其他用户的状态  unavailable：不可用，离线（offline）状态
//  - Type: normal：类似于email，主要特点是不要求响应；
// chat：类似于qq里的好友即时聊天，主要特点是实时通讯；
// groupchat：类似于聊天室里的群聊；
// headline：用于发送alert和notification；
// error：如果发送message出错，发现错误的实体会用这个类别来通知发送者出错了；
//  - Priority: 优先权 0 。高优先级的resource能接受发送到bare JID的消息，低优先级的resource不能
//  - Show: chat：聊天中  away：暂时离开   xa：eXtend Away，长时间离开   dnd：勿打扰   online:在线   offline:离线
//  - LeaguerTid: 成员Tid   群聊时信息发送者Tid
//  - ExtraList: 扩展字段
//  - Error: 错误码
//  - ExtraMap

type PBean struct {
	ThreadId   string            `thrift:"threadId,1,required" json:"threadId"`
	FromTid    *Tid              `thrift:"fromTid,2" json:"fromTid,omitempty"`
	ToTid      *Tid              `thrift:"toTid,3" json:"toTid,omitempty"`
	Status     *string           `thrift:"status,4" json:"status,omitempty"`
	Type       *string           `thrift:"type,5" json:"type,omitempty"`
	Priority   *int32            `thrift:"priority,6" json:"priority,omitempty"`
	Show       *string           `thrift:"show,7" json:"show,omitempty"`
	LeaguerTid *Tid              `thrift:"leaguerTid,8" json:"leaguerTid,omitempty"`
	ExtraList  []*Node           `thrift:"extraList,9" json:"extraList,omitempty"`
	Error      *Error            `thrift:"error,10" json:"error,omitempty"`
	ExtraMap   map[string]string `thrift:"extraMap,11" json:"extraMap,omitempty"`
}

func NewPBean() *PBean {
	return &PBean{}
}

func (p *PBean) GetThreadId() string {
	return p.ThreadId
}

var PBean_FromTid_DEFAULT *Tid

func (p *PBean) GetFromTid() *Tid {
	if !p.IsSetFromTid() {
		return PBean_FromTid_DEFAULT
	}
	return p.FromTid
}

var PBean_ToTid_DEFAULT *Tid

func (p *PBean) GetToTid() *Tid {
	if !p.IsSetToTid() {
		return PBean_ToTid_DEFAULT
	}
	return p.ToTid
}

var PBean_Status_DEFAULT string

func (p *PBean) GetStatus() string {
	if !p.IsSetStatus() {
		return PBean_Status_DEFAULT
	}
	return *p.Status
}

var PBean_Type_DEFAULT string

func (p *PBean) GetType() string {
	if !p.IsSetType() {
		return PBean_Type_DEFAULT
	}
	return *p.Type
}

var PBean_Priority_DEFAULT int32

func (p *PBean) GetPriority() int32 {
	if !p.IsSetPriority() {
		return PBean_Priority_DEFAULT
	}
	return *p.Priority
}

var PBean_Show_DEFAULT string

func (p *PBean) GetShow() string {
	if !p.IsSetShow() {
		return PBean_Show_DEFAULT
	}
	return *p.Show
}

var PBean_LeaguerTid_DEFAULT *Tid

func (p *PBean) GetLeaguerTid() *Tid {
	if !p.IsSetLeaguerTid() {
		return PBean_LeaguerTid_DEFAULT
	}
	return p.LeaguerTid
}

var PBean_ExtraList_DEFAULT []*Node

func (p *PBean) GetExtraList() []*Node {
	return p.ExtraList
}

var PBean_Error_DEFAULT *Error

func (p *PBean) GetError() *Error {
	if !p.IsSetError() {
		return PBean_Error_DEFAULT
	}
	return p.Error
}

var PBean_ExtraMap_DEFAULT map[string]string

func (p *PBean) GetExtraMap() map[string]string {
	return p.ExtraMap
}
func (p *PBean) IsSetFromTid() bool {
	return p.FromTid != nil
}

func (p *PBean) IsSetToTid() bool {
	return p.ToTid != nil
}

func (p *PBean) IsSetStatus() bool {
	return p.Status != nil
}

func (p *PBean) IsSetType() bool {
	return p.Type != nil
}

func (p *PBean) IsSetPriority() bool {
	return p.Priority != nil
}

func (p *PBean) IsSetShow() bool {
	return p.Show != nil
}

func (p *PBean) IsSetLeaguerTid() bool {
	return p.LeaguerTid != nil
}

func (p *PBean) IsSetExtraList() bool {
	return p.ExtraList != nil
}

func (p *PBean) IsSetError() bool {
	return p.Error != nil
}

func (p *PBean) IsSetExtraMap() bool {
	return p.ExtraMap != nil
}

func (p *PBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetThreadId bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetThreadId = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetThreadId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ThreadId is not set"))
	}
	return nil
}

func (p *PBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ThreadId = v
	}
	return nil
}

func (p *PBean) readField2(iprot thrift.TProtocol) error {
	p.FromTid = &Tid{}
	if err := p.FromTid.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FromTid), err)
	}
	return nil
}

func (p *PBean) readField3(iprot thrift.TProtocol) error {
	p.ToTid = &Tid{}
	if err := p.ToTid.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ToTid), err)
	}
	return nil
}

func (p *PBean) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Status = &v
	}
	return nil
}

func (p *PBean) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Type = &v
	}
	return nil
}

func (p *PBean) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Priority = &v
	}
	return nil
}

func (p *PBean) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Show = &v
	}
	return nil
}

func (p *PBean) readField8(iprot thrift.TProtocol) error {
	p.LeaguerTid = &Tid{}
	if err := p.LeaguerTid.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LeaguerTid), err)
	}
	return nil
}

func (p *PBean) readField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Node, 0, size)
	p.ExtraList = tSlice
	for i := 0; i < size; i++ {
		_elem21 := &Node{}
		if err := _elem21.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem21), err)
		}
		p.ExtraList = append(p.ExtraList, _elem21)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *PBean) readField10(iprot thrift.TProtocol) error {
	p.Error = &Error{}
	if err := p.Error.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
	}
	return nil
}

func (p *PBean) readField11(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.ExtraMap = tMap
	for i := 0; i < size; i++ {
		var _key22 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key22 = v
		}
		var _val23 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val23 = v
		}
		p.ExtraMap[_key22] = _val23
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *PBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PBean) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("threadId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:threadId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ThreadId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.threadId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:threadId: ", p), err)
	}
	return err
}

func (p *PBean) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFromTid() {
		if err := oprot.WriteFieldBegin("fromTid", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromTid: ", p), err)
		}
		if err := p.FromTid.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FromTid), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromTid: ", p), err)
		}
	}
	return err
}

func (p *PBean) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetToTid() {
		if err := oprot.WriteFieldBegin("toTid", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:toTid: ", p), err)
		}
		if err := p.ToTid.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ToTid), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:toTid: ", p), err)
		}
	}
	return err
}

func (p *PBean) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:status: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:status: ", p), err)
		}
	}
	return err
}

func (p *PBean) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err := oprot.WriteFieldBegin("type", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:type: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Type)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.type (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:type: ", p), err)
		}
	}
	return err
}

func (p *PBean) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetPriority() {
		if err := oprot.WriteFieldBegin("priority", thrift.I32, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:priority: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Priority)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.priority (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:priority: ", p), err)
		}
	}
	return err
}

func (p *PBean) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetShow() {
		if err := oprot.WriteFieldBegin("show", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:show: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Show)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.show (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:show: ", p), err)
		}
	}
	return err
}

func (p *PBean) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetLeaguerTid() {
		if err := oprot.WriteFieldBegin("leaguerTid", thrift.STRUCT, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:leaguerTid: ", p), err)
		}
		if err := p.LeaguerTid.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LeaguerTid), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:leaguerTid: ", p), err)
		}
	}
	return err
}

func (p *PBean) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtraList() {
		if err := oprot.WriteFieldBegin("extraList", thrift.LIST, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:extraList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ExtraList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ExtraList {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:extraList: ", p), err)
		}
	}
	return err
}

func (p *PBean) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:error: ", p), err)
		}
		if err := p.Error.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:error: ", p), err)
		}
	}
	return err
}

func (p *PBean) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtraMap() {
		if err := oprot.WriteFieldBegin("extraMap", thrift.MAP, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:extraMap: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.ExtraMap {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:extraMap: ", p), err)
		}
	}
	return err
}

func (p *PBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PBean(%+v)", *p)
}

// Attributes:
//  - ThreadId: 线程id  以时间毫秒命名
//  - Mid: 消息id号
//  - FromTid: 来源Tid
//  - ToTid: 目标Tid
//  - Body: 信息内容
//  - Type: normal：类似于email，主要特点是不要求响应；
// chat：类似于qq里的好友即时聊天，主要特点是实时通讯；
// groupchat：类似于聊天室里的群聊；
// headline：用于发送alert和notification；
// error：如果发送message出错，发现错误的实体会用这个类别来通知发送者出错了；
//  - MsgType: 消息类型  1 文字 2 图片 3 语音 4视频 5混合
//  - Offline: 是否离线信息
//  - LeaguerTid: 成员Tid   群聊时信息发送者Tid
//  - ExtraList: 扩展字段
//  - Timestamp: 服务器发送信息时间戳(毫秒)
//  - Error: 错误码
//  - ExtraMap
//  - Readstatus: 0未读  1已读
type MBean struct {
	ThreadId   string            `thrift:"threadId,1,required" json:"threadId"`
	Mid        *string           `thrift:"mid,2" json:"mid,omitempty"`
	FromTid    *Tid              `thrift:"fromTid,3" json:"fromTid,omitempty"`
	ToTid      *Tid              `thrift:"toTid,4" json:"toTid,omitempty"`
	Body       *string           `thrift:"body,5" json:"body,omitempty"`
	Type       *string           `thrift:"type,6" json:"type,omitempty"`
	MsgType    *int16            `thrift:"msgType,7" json:"msgType,omitempty"`
	Offline    *Time             `thrift:"offline,8" json:"offline,omitempty"`
	LeaguerTid *Tid              `thrift:"leaguerTid,9" json:"leaguerTid,omitempty"`
	ExtraList  []*Node           `thrift:"extraList,10" json:"extraList,omitempty"`
	Timestamp  *string           `thrift:"XXXstamp,11" json:"XXXstamp,omitempty"`
	Error      *Error            `thrift:"error,12" json:"error,omitempty"`
	ExtraMap   map[string]string `thrift:"extraMap,13" json:"extraMap,omitempty"`
	Readstatus *int16            `thrift:"readstatus,14" json:"readstatus,omitempty"`
}

func NewMBean() *MBean {
	return &MBean{}
}

func (p *MBean) GetThreadId() string {
	return p.ThreadId
}

var MBean_Mid_DEFAULT string

func (p *MBean) GetMid() string {
	if !p.IsSetMid() {
		return MBean_Mid_DEFAULT
	}
	return *p.Mid
}

var MBean_FromTid_DEFAULT *Tid

func (p *MBean) GetFromTid() *Tid {
	if !p.IsSetFromTid() {
		return MBean_FromTid_DEFAULT
	}
	return p.FromTid
}

var MBean_ToTid_DEFAULT *Tid

func (p *MBean) GetToTid() *Tid {
	if !p.IsSetToTid() {
		return MBean_ToTid_DEFAULT
	}
	return p.ToTid
}

var MBean_Body_DEFAULT string

func (p *MBean) GetBody() string {
	if !p.IsSetBody() {
		return MBean_Body_DEFAULT
	}
	return *p.Body
}

var MBean_Type_DEFAULT string

func (p *MBean) GetType() string {
	if !p.IsSetType() {
		return MBean_Type_DEFAULT
	}
	return *p.Type
}

var MBean_MsgType_DEFAULT int16

func (p *MBean) GetMsgType() int16 {
	if !p.IsSetMsgType() {
		return MBean_MsgType_DEFAULT
	}
	return *p.MsgType
}

var MBean_Offline_DEFAULT *Time

func (p *MBean) GetOffline() *Time {
	if !p.IsSetOffline() {
		return MBean_Offline_DEFAULT
	}
	return p.Offline
}

var MBean_LeaguerTid_DEFAULT *Tid

func (p *MBean) GetLeaguerTid() *Tid {
	if !p.IsSetLeaguerTid() {
		return MBean_LeaguerTid_DEFAULT
	}
	return p.LeaguerTid
}

var MBean_ExtraList_DEFAULT []*Node

func (p *MBean) GetExtraList() []*Node {
	return p.ExtraList
}

var MBean_Timestamp_DEFAULT string

func (p *MBean) GetTimestamp() string {
	if !p.IsSetTimestamp() {
		return MBean_Timestamp_DEFAULT
	}
	return *p.Timestamp
}

var MBean_Error_DEFAULT *Error

func (p *MBean) GetError() *Error {
	if !p.IsSetError() {
		return MBean_Error_DEFAULT
	}
	return p.Error
}

var MBean_ExtraMap_DEFAULT map[string]string

func (p *MBean) GetExtraMap() map[string]string {
	return p.ExtraMap
}

var MBean_Readstatus_DEFAULT int16

func (p *MBean) GetReadstatus() int16 {
	if !p.IsSetReadstatus() {
		return MBean_Readstatus_DEFAULT
	}
	return *p.Readstatus
}
func (p *MBean) IsSetMid() bool {
	return p.Mid != nil
}

func (p *MBean) IsSetFromTid() bool {
	return p.FromTid != nil
}

func (p *MBean) IsSetToTid() bool {
	return p.ToTid != nil
}

func (p *MBean) IsSetBody() bool {
	return p.Body != nil
}

func (p *MBean) IsSetType() bool {
	return p.Type != nil
}

func (p *MBean) IsSetMsgType() bool {
	return p.MsgType != nil
}

func (p *MBean) IsSetOffline() bool {
	return p.Offline != nil
}

func (p *MBean) IsSetLeaguerTid() bool {
	return p.LeaguerTid != nil
}

func (p *MBean) IsSetExtraList() bool {
	return p.ExtraList != nil
}

func (p *MBean) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *MBean) IsSetError() bool {
	return p.Error != nil
}

func (p *MBean) IsSetExtraMap() bool {
	return p.ExtraMap != nil
}

func (p *MBean) IsSetReadstatus() bool {
	return p.Readstatus != nil
}

func (p *MBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetThreadId bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetThreadId = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetThreadId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ThreadId is not set"))
	}
	return nil
}

func (p *MBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ThreadId = v
	}
	return nil
}

func (p *MBean) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Mid = &v
	}
	return nil
}

func (p *MBean) readField3(iprot thrift.TProtocol) error {
	p.FromTid = &Tid{}
	if err := p.FromTid.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FromTid), err)
	}
	return nil
}

func (p *MBean) readField4(iprot thrift.TProtocol) error {
	p.ToTid = &Tid{}
	if err := p.ToTid.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ToTid), err)
	}
	return nil
}

func (p *MBean) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Body = &v
	}
	return nil
}

func (p *MBean) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Type = &v
	}
	return nil
}

func (p *MBean) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.MsgType = &v
	}
	return nil
}

func (p *MBean) readField8(iprot thrift.TProtocol) error {
	p.Offline = &Time{}
	if err := p.Offline.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Offline), err)
	}
	return nil
}

func (p *MBean) readField9(iprot thrift.TProtocol) error {
	p.LeaguerTid = &Tid{}
	if err := p.LeaguerTid.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LeaguerTid), err)
	}
	return nil
}

func (p *MBean) readField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Node, 0, size)
	p.ExtraList = tSlice
	for i := 0; i < size; i++ {
		_elem24 := &Node{}
		if err := _elem24.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem24), err)
		}
		p.ExtraList = append(p.ExtraList, _elem24)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MBean) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Timestamp = &v
	}
	return nil
}

func (p *MBean) readField12(iprot thrift.TProtocol) error {
	p.Error = &Error{}
	if err := p.Error.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
	}
	return nil
}

func (p *MBean) readField13(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.ExtraMap = tMap
	for i := 0; i < size; i++ {
		var _key25 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key25 = v
		}
		var _val26 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val26 = v
		}
		p.ExtraMap[_key25] = _val26
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *MBean) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.Readstatus = &v
	}
	return nil
}

func (p *MBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MBean) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("threadId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:threadId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ThreadId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.threadId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:threadId: ", p), err)
	}
	return err
}

func (p *MBean) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMid() {
		if err := oprot.WriteFieldBegin("mid", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mid: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Mid)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.mid (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mid: ", p), err)
		}
	}
	return err
}

func (p *MBean) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetFromTid() {
		if err := oprot.WriteFieldBegin("fromTid", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fromTid: ", p), err)
		}
		if err := p.FromTid.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FromTid), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fromTid: ", p), err)
		}
	}
	return err
}

func (p *MBean) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetToTid() {
		if err := oprot.WriteFieldBegin("toTid", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:toTid: ", p), err)
		}
		if err := p.ToTid.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ToTid), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:toTid: ", p), err)
		}
	}
	return err
}

func (p *MBean) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetBody() {
		if err := oprot.WriteFieldBegin("body", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:body: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Body)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.body (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:body: ", p), err)
		}
	}
	return err
}

func (p *MBean) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err := oprot.WriteFieldBegin("type", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:type: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Type)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.type (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:type: ", p), err)
		}
	}
	return err
}

func (p *MBean) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgType() {
		if err := oprot.WriteFieldBegin("msgType", thrift.I16, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:msgType: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.MsgType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.msgType (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:msgType: ", p), err)
		}
	}
	return err
}

func (p *MBean) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetOffline() {
		if err := oprot.WriteFieldBegin("offline", thrift.STRUCT, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:offline: ", p), err)
		}
		if err := p.Offline.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Offline), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:offline: ", p), err)
		}
	}
	return err
}

func (p *MBean) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetLeaguerTid() {
		if err := oprot.WriteFieldBegin("leaguerTid", thrift.STRUCT, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:leaguerTid: ", p), err)
		}
		if err := p.LeaguerTid.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LeaguerTid), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:leaguerTid: ", p), err)
		}
	}
	return err
}

func (p *MBean) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtraList() {
		if err := oprot.WriteFieldBegin("extraList", thrift.LIST, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:extraList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ExtraList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ExtraList {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:extraList: ", p), err)
		}
	}
	return err
}

func (p *MBean) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("XXXstamp", thrift.STRING, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:XXXstamp: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Timestamp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.XXXstamp (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:XXXstamp: ", p), err)
		}
	}
	return err
}

func (p *MBean) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:error: ", p), err)
		}
		if err := p.Error.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:error: ", p), err)
		}
	}
	return err
}

func (p *MBean) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtraMap() {
		if err := oprot.WriteFieldBegin("extraMap", thrift.MAP, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:extraMap: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.ExtraMap {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:extraMap: ", p), err)
		}
	}
	return err
}

func (p *MBean) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetReadstatus() {
		if err := oprot.WriteFieldBegin("readstatus", thrift.I16, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:readstatus: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.Readstatus)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.readstatus (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:readstatus: ", p), err)
		}
	}
	return err
}

func (p *MBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MBean(%+v)", *p)
}

// Attributes:
//  - ThreadId: 线程id
//  - FromTid
//  - ToTid
//  - Type: Get :获取当前域值。类似于http get方法
// Set :设置或替换get查询的值。类似于http put方法。
// Result :说明成功的响应了先前的查询。类似于http状态码200。
// Error: 查询和响应中出现的错误。
//  - ExtraList: 扩展字段
//  - Error: 错误码
//  - ExtraMap
type IqBean struct {
	ThreadId  string            `thrift:"threadId,1,required" json:"threadId"`
	FromTid   *Tid              `thrift:"fromTid,2" json:"fromTid,omitempty"`
	ToTid     *Tid              `thrift:"toTid,3" json:"toTid,omitempty"`
	Type      *string           `thrift:"type,4" json:"type,omitempty"`
	ExtraList []*Node           `thrift:"extraList,5" json:"extraList,omitempty"`
	Error     *Error            `thrift:"error,6" json:"error,omitempty"`
	ExtraMap  map[string]string `thrift:"extraMap,7" json:"extraMap,omitempty"`
}

func NewIqBean() *IqBean {
	return &IqBean{}
}

func (p *IqBean) GetThreadId() string {
	return p.ThreadId
}

var IqBean_FromTid_DEFAULT *Tid

func (p *IqBean) GetFromTid() *Tid {
	if !p.IsSetFromTid() {
		return IqBean_FromTid_DEFAULT
	}
	return p.FromTid
}

var IqBean_ToTid_DEFAULT *Tid

func (p *IqBean) GetToTid() *Tid {
	if !p.IsSetToTid() {
		return IqBean_ToTid_DEFAULT
	}
	return p.ToTid
}

var IqBean_Type_DEFAULT string

func (p *IqBean) GetType() string {
	if !p.IsSetType() {
		return IqBean_Type_DEFAULT
	}
	return *p.Type
}

var IqBean_ExtraList_DEFAULT []*Node

func (p *IqBean) GetExtraList() []*Node {
	return p.ExtraList
}

var IqBean_Error_DEFAULT *Error

func (p *IqBean) GetError() *Error {
	if !p.IsSetError() {
		return IqBean_Error_DEFAULT
	}
	return p.Error
}

var IqBean_ExtraMap_DEFAULT map[string]string

func (p *IqBean) GetExtraMap() map[string]string {
	return p.ExtraMap
}
func (p *IqBean) IsSetFromTid() bool {
	return p.FromTid != nil
}

func (p *IqBean) IsSetToTid() bool {
	return p.ToTid != nil
}

func (p *IqBean) IsSetType() bool {
	return p.Type != nil
}

func (p *IqBean) IsSetExtraList() bool {
	return p.ExtraList != nil
}

func (p *IqBean) IsSetError() bool {
	return p.Error != nil
}

func (p *IqBean) IsSetExtraMap() bool {
	return p.ExtraMap != nil
}

func (p *IqBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetThreadId bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetThreadId = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetThreadId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ThreadId is not set"))
	}
	return nil
}

func (p *IqBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ThreadId = v
	}
	return nil
}

func (p *IqBean) readField2(iprot thrift.TProtocol) error {
	p.FromTid = &Tid{}
	if err := p.FromTid.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FromTid), err)
	}
	return nil
}

func (p *IqBean) readField3(iprot thrift.TProtocol) error {
	p.ToTid = &Tid{}
	if err := p.ToTid.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ToTid), err)
	}
	return nil
}

func (p *IqBean) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Type = &v
	}
	return nil
}

func (p *IqBean) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Node, 0, size)
	p.ExtraList = tSlice
	for i := 0; i < size; i++ {
		_elem27 := &Node{}
		if err := _elem27.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem27), err)
		}
		p.ExtraList = append(p.ExtraList, _elem27)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *IqBean) readField6(iprot thrift.TProtocol) error {
	p.Error = &Error{}
	if err := p.Error.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
	}
	return nil
}

func (p *IqBean) readField7(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.ExtraMap = tMap
	for i := 0; i < size; i++ {
		var _key28 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key28 = v
		}
		var _val29 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val29 = v
		}
		p.ExtraMap[_key28] = _val29
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *IqBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IqBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IqBean) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("threadId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:threadId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ThreadId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.threadId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:threadId: ", p), err)
	}
	return err
}

func (p *IqBean) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFromTid() {
		if err := oprot.WriteFieldBegin("fromTid", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromTid: ", p), err)
		}
		if err := p.FromTid.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FromTid), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromTid: ", p), err)
		}
	}
	return err
}

func (p *IqBean) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetToTid() {
		if err := oprot.WriteFieldBegin("toTid", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:toTid: ", p), err)
		}
		if err := p.ToTid.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ToTid), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:toTid: ", p), err)
		}
	}
	return err
}

func (p *IqBean) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err := oprot.WriteFieldBegin("type", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:type: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Type)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.type (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:type: ", p), err)
		}
	}
	return err
}

func (p *IqBean) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtraList() {
		if err := oprot.WriteFieldBegin("extraList", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:extraList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ExtraList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ExtraList {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:extraList: ", p), err)
		}
	}
	return err
}

func (p *IqBean) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:error: ", p), err)
		}
		if err := p.Error.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:error: ", p), err)
		}
	}
	return err
}

func (p *IqBean) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtraMap() {
		if err := oprot.WriteFieldBegin("extraMap", thrift.MAP, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:extraMap: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.ExtraMap {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:extraMap: ", p), err)
		}
	}
	return err
}

func (p *IqBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IqBean(%+v)", *p)
}

// Attributes:
//  - Subscription: none表示用户和contact之前没有任何的关系（虽然在server的buddy list中存在）
// to表示用户能看到contact的presence，但是contact看不到用户的Presence
// from和to的含义相反，指用户看不到contact的presence，但是contact可以看到
// both表示相关之间都能看到对方的presence
//  - Tid
//  - Name: 用户名
//  - ExtraMap
type Roster struct {
	Subscription string            `thrift:"subscription,1,required" json:"subscription"`
	Tid          *Tid              `thrift:"tid,2,required" json:"tid"`
	Name         *string           `thrift:"name,3" json:"name,omitempty"`
	ExtraMap     map[string]string `thrift:"extraMap,4" json:"extraMap,omitempty"`
}

func NewRoster() *Roster {
	return &Roster{}
}

func (p *Roster) GetSubscription() string {
	return p.Subscription
}

var Roster_Tid_DEFAULT *Tid

func (p *Roster) GetTid() *Tid {
	if !p.IsSetTid() {
		return Roster_Tid_DEFAULT
	}
	return p.Tid
}

var Roster_Name_DEFAULT string

func (p *Roster) GetName() string {
	if !p.IsSetName() {
		return Roster_Name_DEFAULT
	}
	return *p.Name
}

var Roster_ExtraMap_DEFAULT map[string]string

func (p *Roster) GetExtraMap() map[string]string {
	return p.ExtraMap
}
func (p *Roster) IsSetTid() bool {
	return p.Tid != nil
}

func (p *Roster) IsSetName() bool {
	return p.Name != nil
}

func (p *Roster) IsSetExtraMap() bool {
	return p.ExtraMap != nil
}

func (p *Roster) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSubscription bool = false
	var issetTid bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetSubscription = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetTid = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSubscription {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Subscription is not set"))
	}
	if !issetTid {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tid is not set"))
	}
	return nil
}

func (p *Roster) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Subscription = v
	}
	return nil
}

func (p *Roster) readField2(iprot thrift.TProtocol) error {
	p.Tid = &Tid{}
	if err := p.Tid.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tid), err)
	}
	return nil
}

func (p *Roster) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *Roster) readField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.ExtraMap = tMap
	for i := 0; i < size; i++ {
		var _key30 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key30 = v
		}
		var _val31 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val31 = v
		}
		p.ExtraMap[_key30] = _val31
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Roster) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Roster"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Roster) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("subscription", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:subscription: ", p), err)
	}
	if err := oprot.WriteString(string(p.Subscription)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.subscription (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:subscription: ", p), err)
	}
	return err
}

func (p *Roster) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tid", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tid: ", p), err)
	}
	if err := p.Tid.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tid), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tid: ", p), err)
	}
	return err
}

func (p *Roster) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Name)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err)
		}
	}
	return err
}

func (p *Roster) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtraMap() {
		if err := oprot.WriteFieldBegin("extraMap", thrift.MAP, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extraMap: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.ExtraMap {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extraMap: ", p), err)
		}
	}
	return err
}

func (p *Roster) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Roster(%+v)", *p)
}

// Attributes:
//  - Error: 错误码
//  - Ub: 远程用户信息
//  - ExtraMap
type RemoteUserBean struct {
	Error    *Error            `thrift:"error,1" json:"error,omitempty"`
	Ub       *UserBean         `thrift:"ub,2" json:"ub,omitempty"`
	ExtraMap map[string]string `thrift:"extraMap,3" json:"extraMap,omitempty"`
}

func NewRemoteUserBean() *RemoteUserBean {
	return &RemoteUserBean{}
}

var RemoteUserBean_Error_DEFAULT *Error

func (p *RemoteUserBean) GetError() *Error {
	if !p.IsSetError() {
		return RemoteUserBean_Error_DEFAULT
	}
	return p.Error
}

var RemoteUserBean_Ub_DEFAULT *UserBean

func (p *RemoteUserBean) GetUb() *UserBean {
	if !p.IsSetUb() {
		return RemoteUserBean_Ub_DEFAULT
	}
	return p.Ub
}

var RemoteUserBean_ExtraMap_DEFAULT map[string]string

func (p *RemoteUserBean) GetExtraMap() map[string]string {
	return p.ExtraMap
}
func (p *RemoteUserBean) IsSetError() bool {
	return p.Error != nil
}

func (p *RemoteUserBean) IsSetUb() bool {
	return p.Ub != nil
}

func (p *RemoteUserBean) IsSetExtraMap() bool {
	return p.ExtraMap != nil
}

func (p *RemoteUserBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoteUserBean) readField1(iprot thrift.TProtocol) error {
	p.Error = &Error{}
	if err := p.Error.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
	}
	return nil
}

func (p *RemoteUserBean) readField2(iprot thrift.TProtocol) error {
	p.Ub = &UserBean{}
	if err := p.Ub.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ub), err)
	}
	return nil
}

func (p *RemoteUserBean) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.ExtraMap = tMap
	for i := 0; i < size; i++ {
		var _key32 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key32 = v
		}
		var _val33 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val33 = v
		}
		p.ExtraMap[_key32] = _val33
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *RemoteUserBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RemoteUserBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoteUserBean) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
		}
		if err := p.Error.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
		}
	}
	return err
}

func (p *RemoteUserBean) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUb() {
		if err := oprot.WriteFieldBegin("ub", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ub: ", p), err)
		}
		if err := p.Ub.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ub), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ub: ", p), err)
		}
	}
	return err
}

func (p *RemoteUserBean) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtraMap() {
		if err := oprot.WriteFieldBegin("extraMap", thrift.MAP, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extraMap: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.ExtraMap {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extraMap: ", p), err)
		}
	}
	return err
}

func (p *RemoteUserBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteUserBean(%+v)", *p)
}

// Attributes:
//  - Error: 错误码
//  - Room: 远程房间信息
//  - ExtraMap
type RemoteRoom struct {
	Error    *Error            `thrift:"error,1" json:"error,omitempty"`
	Room     *Room             `thrift:"room,2" json:"room,omitempty"`
	ExtraMap map[string]string `thrift:"extraMap,3" json:"extraMap,omitempty"`
}

func NewRemoteRoom() *RemoteRoom {
	return &RemoteRoom{}
}

var RemoteRoom_Error_DEFAULT *Error

func (p *RemoteRoom) GetError() *Error {
	if !p.IsSetError() {
		return RemoteRoom_Error_DEFAULT
	}
	return p.Error
}

var RemoteRoom_Room_DEFAULT *Room

func (p *RemoteRoom) GetRoom() *Room {
	if !p.IsSetRoom() {
		return RemoteRoom_Room_DEFAULT
	}
	return p.Room
}

var RemoteRoom_ExtraMap_DEFAULT map[string]string

func (p *RemoteRoom) GetExtraMap() map[string]string {
	return p.ExtraMap
}
func (p *RemoteRoom) IsSetError() bool {
	return p.Error != nil
}

func (p *RemoteRoom) IsSetRoom() bool {
	return p.Room != nil
}

func (p *RemoteRoom) IsSetExtraMap() bool {
	return p.ExtraMap != nil
}

func (p *RemoteRoom) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoteRoom) readField1(iprot thrift.TProtocol) error {
	p.Error = &Error{}
	if err := p.Error.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
	}
	return nil
}

func (p *RemoteRoom) readField2(iprot thrift.TProtocol) error {
	p.Room = &Room{}
	if err := p.Room.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Room), err)
	}
	return nil
}

func (p *RemoteRoom) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.ExtraMap = tMap
	for i := 0; i < size; i++ {
		var _key34 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key34 = v
		}
		var _val35 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val35 = v
		}
		p.ExtraMap[_key34] = _val35
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *RemoteRoom) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RemoteRoom"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoteRoom) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
		}
		if err := p.Error.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
		}
	}
	return err
}

func (p *RemoteRoom) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRoom() {
		if err := oprot.WriteFieldBegin("room", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:room: ", p), err)
		}
		if err := p.Room.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Room), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:room: ", p), err)
		}
	}
	return err
}

func (p *RemoteRoom) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtraMap() {
		if err := oprot.WriteFieldBegin("extraMap", thrift.MAP, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extraMap: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.ExtraMap {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extraMap: ", p), err)
		}
	}
	return err
}

func (p *RemoteRoom) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteRoom(%+v)", *p)
}

// Attributes:
//  - ThreadId
//  - Error: 错误码
//  - ExtraList: 附加信息
//  - ExtraMap
type ResponseBean struct {
	ThreadId  *string           `thrift:"threadId,1" json:"threadId,omitempty"`
	Error     *Error            `thrift:"error,2" json:"error,omitempty"`
	ExtraList []*Node           `thrift:"extraList,3" json:"extraList,omitempty"`
	ExtraMap  map[string]string `thrift:"extraMap,4" json:"extraMap,omitempty"`
}

func NewResponseBean() *ResponseBean {
	return &ResponseBean{}
}

var ResponseBean_ThreadId_DEFAULT string

func (p *ResponseBean) GetThreadId() string {
	if !p.IsSetThreadId() {
		return ResponseBean_ThreadId_DEFAULT
	}
	return *p.ThreadId
}

var ResponseBean_Error_DEFAULT *Error

func (p *ResponseBean) GetError() *Error {
	if !p.IsSetError() {
		return ResponseBean_Error_DEFAULT
	}
	return p.Error
}

var ResponseBean_ExtraList_DEFAULT []*Node

func (p *ResponseBean) GetExtraList() []*Node {
	return p.ExtraList
}

var ResponseBean_ExtraMap_DEFAULT map[string]string

func (p *ResponseBean) GetExtraMap() map[string]string {
	return p.ExtraMap
}
func (p *ResponseBean) IsSetThreadId() bool {
	return p.ThreadId != nil
}

func (p *ResponseBean) IsSetError() bool {
	return p.Error != nil
}

func (p *ResponseBean) IsSetExtraList() bool {
	return p.ExtraList != nil
}

func (p *ResponseBean) IsSetExtraMap() bool {
	return p.ExtraMap != nil
}

func (p *ResponseBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ResponseBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ThreadId = &v
	}
	return nil
}

func (p *ResponseBean) readField2(iprot thrift.TProtocol) error {
	p.Error = &Error{}
	if err := p.Error.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
	}
	return nil
}

func (p *ResponseBean) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Node, 0, size)
	p.ExtraList = tSlice
	for i := 0; i < size; i++ {
		_elem36 := &Node{}
		if err := _elem36.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem36), err)
		}
		p.ExtraList = append(p.ExtraList, _elem36)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ResponseBean) readField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.ExtraMap = tMap
	for i := 0; i < size; i++ {
		var _key37 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key37 = v
		}
		var _val38 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val38 = v
		}
		p.ExtraMap[_key37] = _val38
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ResponseBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ResponseBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ResponseBean) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetThreadId() {
		if err := oprot.WriteFieldBegin("threadId", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:threadId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ThreadId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.threadId (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:threadId: ", p), err)
		}
	}
	return err
}

func (p *ResponseBean) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error: ", p), err)
		}
		if err := p.Error.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error: ", p), err)
		}
	}
	return err
}

func (p *ResponseBean) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtraList() {
		if err := oprot.WriteFieldBegin("extraList", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extraList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ExtraList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ExtraList {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extraList: ", p), err)
		}
	}
	return err
}

func (p *ResponseBean) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtraMap() {
		if err := oprot.WriteFieldBegin("extraMap", thrift.MAP, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extraMap: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.ExtraMap {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extraMap: ", p), err)
		}
	}
	return err
}

func (p *ResponseBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResponseBean(%+v)", *p)
}

// Attributes:
//  - FromTid
//  - ToTid
//  - Addr: ip地址
//  - Port: 端口
//  - Transport: 传输类型  1:tcp 2:udp
//  - PubId: 发布id 通过发布id 可以连接两个发布id相同的用户
//  - ExtraMap
type Sock5Bean struct {
	FromTid   *Tid              `thrift:"fromTid,1,required" json:"fromTid"`
	ToTid     *Tid              `thrift:"toTid,2,required" json:"toTid"`
	Addr      string            `thrift:"addr,3,required" json:"addr"`
	Port      int32             `thrift:"port,4,required" json:"port"`
	Transport int16             `thrift:"transport,5,required" json:"transport"`
	PubId     string            `thrift:"pubId,6,required" json:"pubId"`
	ExtraMap  map[string]string `thrift:"extraMap,7" json:"extraMap,omitempty"`
}

func NewSock5Bean() *Sock5Bean {
	return &Sock5Bean{}
}

var Sock5Bean_FromTid_DEFAULT *Tid

func (p *Sock5Bean) GetFromTid() *Tid {
	if !p.IsSetFromTid() {
		return Sock5Bean_FromTid_DEFAULT
	}
	return p.FromTid
}

var Sock5Bean_ToTid_DEFAULT *Tid

func (p *Sock5Bean) GetToTid() *Tid {
	if !p.IsSetToTid() {
		return Sock5Bean_ToTid_DEFAULT
	}
	return p.ToTid
}

func (p *Sock5Bean) GetAddr() string {
	return p.Addr
}

func (p *Sock5Bean) GetPort() int32 {
	return p.Port
}

func (p *Sock5Bean) GetTransport() int16 {
	return p.Transport
}

func (p *Sock5Bean) GetPubId() string {
	return p.PubId
}

var Sock5Bean_ExtraMap_DEFAULT map[string]string

func (p *Sock5Bean) GetExtraMap() map[string]string {
	return p.ExtraMap
}
func (p *Sock5Bean) IsSetFromTid() bool {
	return p.FromTid != nil
}

func (p *Sock5Bean) IsSetToTid() bool {
	return p.ToTid != nil
}

func (p *Sock5Bean) IsSetExtraMap() bool {
	return p.ExtraMap != nil
}

func (p *Sock5Bean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetFromTid bool = false
	var issetToTid bool = false
	var issetAddr bool = false
	var issetPort bool = false
	var issetTransport bool = false
	var issetPubId bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetFromTid = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetToTid = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetAddr = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetPort = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetTransport = true
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
			issetPubId = true
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetFromTid {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FromTid is not set"))
	}
	if !issetToTid {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ToTid is not set"))
	}
	if !issetAddr {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Addr is not set"))
	}
	if !issetPort {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Port is not set"))
	}
	if !issetTransport {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Transport is not set"))
	}
	if !issetPubId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PubId is not set"))
	}
	return nil
}

func (p *Sock5Bean) readField1(iprot thrift.TProtocol) error {
	p.FromTid = &Tid{}
	if err := p.FromTid.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FromTid), err)
	}
	return nil
}

func (p *Sock5Bean) readField2(iprot thrift.TProtocol) error {
	p.ToTid = &Tid{}
	if err := p.ToTid.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ToTid), err)
	}
	return nil
}

func (p *Sock5Bean) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Addr = v
	}
	return nil
}

func (p *Sock5Bean) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Port = v
	}
	return nil
}

func (p *Sock5Bean) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Transport = v
	}
	return nil
}

func (p *Sock5Bean) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.PubId = v
	}
	return nil
}

func (p *Sock5Bean) readField7(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.ExtraMap = tMap
	for i := 0; i < size; i++ {
		var _key39 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key39 = v
		}
		var _val40 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val40 = v
		}
		p.ExtraMap[_key39] = _val40
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Sock5Bean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Sock5Bean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Sock5Bean) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fromTid", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromTid: ", p), err)
	}
	if err := p.FromTid.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FromTid), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromTid: ", p), err)
	}
	return err
}

func (p *Sock5Bean) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("toTid", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:toTid: ", p), err)
	}
	if err := p.ToTid.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ToTid), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:toTid: ", p), err)
	}
	return err
}

func (p *Sock5Bean) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("addr", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:addr: ", p), err)
	}
	if err := oprot.WriteString(string(p.Addr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.addr (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:addr: ", p), err)
	}
	return err
}

func (p *Sock5Bean) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("port", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:port: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Port)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.port (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:port: ", p), err)
	}
	return err
}

func (p *Sock5Bean) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("transport", thrift.I16, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:transport: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Transport)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.transport (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:transport: ", p), err)
	}
	return err
}

func (p *Sock5Bean) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pubId", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:pubId: ", p), err)
	}
	if err := oprot.WriteString(string(p.PubId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pubId (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:pubId: ", p), err)
	}
	return err
}

func (p *Sock5Bean) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtraMap() {
		if err := oprot.WriteFieldBegin("extraMap", thrift.MAP, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:extraMap: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.ExtraMap {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:extraMap: ", p), err)
		}
	}
	return err
}

func (p *Sock5Bean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Sock5Bean(%+v)", *p)
}

// Attributes:
//  - PubId: 发布id
//  - Index: 序号数据块
//  - Bytes: 数据块
//  - ExtraMap
type Sock5Bytes struct {
	PubId    string            `thrift:"pubId,1,required" json:"pubId"`
	Index    int32             `thrift:"index,2,required" json:"index"`
	Bytes    [][]byte          `thrift:"bytes,3,required" json:"bytes"`
	ExtraMap map[string]string `thrift:"extraMap,4" json:"extraMap,omitempty"`
}

func NewSock5Bytes() *Sock5Bytes {
	return &Sock5Bytes{}
}

func (p *Sock5Bytes) GetPubId() string {
	return p.PubId
}

func (p *Sock5Bytes) GetIndex() int32 {
	return p.Index
}

func (p *Sock5Bytes) GetBytes() [][]byte {
	return p.Bytes
}

var Sock5Bytes_ExtraMap_DEFAULT map[string]string

func (p *Sock5Bytes) GetExtraMap() map[string]string {
	return p.ExtraMap
}
func (p *Sock5Bytes) IsSetExtraMap() bool {
	return p.ExtraMap != nil
}

func (p *Sock5Bytes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetPubId bool = false
	var issetIndex bool = false
	var issetBytes bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetPubId = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetIndex = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetBytes = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetPubId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PubId is not set"))
	}
	if !issetIndex {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Index is not set"))
	}
	if !issetBytes {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Bytes is not set"))
	}
	return nil
}

func (p *Sock5Bytes) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.PubId = v
	}
	return nil
}

func (p *Sock5Bytes) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Index = v
	}
	return nil
}

func (p *Sock5Bytes) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]byte, 0, size)
	p.Bytes = tSlice
	for i := 0; i < size; i++ {
		var _elem41 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem41 = v
		}
		p.Bytes = append(p.Bytes, _elem41)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Sock5Bytes) readField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.ExtraMap = tMap
	for i := 0; i < size; i++ {
		var _key42 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key42 = v
		}
		var _val43 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val43 = v
		}
		p.ExtraMap[_key42] = _val43
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Sock5Bytes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Sock5Bytes"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Sock5Bytes) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pubId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pubId: ", p), err)
	}
	if err := oprot.WriteString(string(p.PubId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pubId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pubId: ", p), err)
	}
	return err
}

func (p *Sock5Bytes) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("index", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Index)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.index (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index: ", p), err)
	}
	return err
}

func (p *Sock5Bytes) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bytes", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:bytes: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Bytes)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Bytes {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:bytes: ", p), err)
	}
	return err
}

func (p *Sock5Bytes) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtraMap() {
		if err := oprot.WriteFieldBegin("extraMap", thrift.MAP, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extraMap: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.ExtraMap {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extraMap: ", p), err)
		}
	}
	return err
}

func (p *Sock5Bytes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Sock5Bytes(%+v)", *p)
}

// Attributes:
//  - FromTimeStamp: 时间上
//  - ToTimeStamp: 时间下
//  - LimitCount: 条数
//  - ExtraMap
type Page struct {
	FromTimeStamp *string           `thrift:"fromTimeStamp,1" json:"fromTimeStamp,omitempty"`
	ToTimeStamp   *string           `thrift:"toTimeStamp,2" json:"toTimeStamp,omitempty"`
	LimitCount    *int32            `thrift:"limitCount,3" json:"limitCount,omitempty"`
	ExtraMap      map[string]string `thrift:"extraMap,4" json:"extraMap,omitempty"`
}

func NewPage() *Page {
	return &Page{}
}

var Page_FromTimeStamp_DEFAULT string

func (p *Page) GetFromTimeStamp() string {
	if !p.IsSetFromTimeStamp() {
		return Page_FromTimeStamp_DEFAULT
	}
	return *p.FromTimeStamp
}

var Page_ToTimeStamp_DEFAULT string

func (p *Page) GetToTimeStamp() string {
	if !p.IsSetToTimeStamp() {
		return Page_ToTimeStamp_DEFAULT
	}
	return *p.ToTimeStamp
}

var Page_LimitCount_DEFAULT int32

func (p *Page) GetLimitCount() int32 {
	if !p.IsSetLimitCount() {
		return Page_LimitCount_DEFAULT
	}
	return *p.LimitCount
}

var Page_ExtraMap_DEFAULT map[string]string

func (p *Page) GetExtraMap() map[string]string {
	return p.ExtraMap
}
func (p *Page) IsSetFromTimeStamp() bool {
	return p.FromTimeStamp != nil
}

func (p *Page) IsSetToTimeStamp() bool {
	return p.ToTimeStamp != nil
}

func (p *Page) IsSetLimitCount() bool {
	return p.LimitCount != nil
}

func (p *Page) IsSetExtraMap() bool {
	return p.ExtraMap != nil
}

func (p *Page) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Page) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.FromTimeStamp = &v
	}
	return nil
}

func (p *Page) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ToTimeStamp = &v
	}
	return nil
}

func (p *Page) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.LimitCount = &v
	}
	return nil
}

func (p *Page) readField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.ExtraMap = tMap
	for i := 0; i < size; i++ {
		var _key44 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key44 = v
		}
		var _val45 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val45 = v
		}
		p.ExtraMap[_key44] = _val45
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Page) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Page"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Page) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFromTimeStamp() {
		if err := oprot.WriteFieldBegin("fromTimeStamp", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromTimeStamp: ", p), err)
		}
		if err := oprot.WriteString(string(*p.FromTimeStamp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.fromTimeStamp (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromTimeStamp: ", p), err)
		}
	}
	return err
}

func (p *Page) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetToTimeStamp() {
		if err := oprot.WriteFieldBegin("toTimeStamp", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:toTimeStamp: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ToTimeStamp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.toTimeStamp (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:toTimeStamp: ", p), err)
		}
	}
	return err
}

func (p *Page) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLimitCount() {
		if err := oprot.WriteFieldBegin("limitCount", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:limitCount: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.LimitCount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.limitCount (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:limitCount: ", p), err)
		}
	}
	return err
}

func (p *Page) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtraMap() {
		if err := oprot.WriteFieldBegin("extraMap", thrift.MAP, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extraMap: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.ExtraMap {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extraMap: ", p), err)
		}
	}
	return err
}

func (p *Page) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Page(%+v)", *p)
}

// Attributes:
//  - Tidlist: tid集合
//  - Page: 分页
//  - Midlist: mid集合
//  - ExtraMap
type MessageIq struct {
	Tidlist  []string          `thrift:"tidlist,1" json:"tidlist,omitempty"`
	Page     *Page             `thrift:"age,2" json:"age,omitempty"`
	Midlist  []string          `thrift:"midlist,3" json:"midlist,omitempty"`
	ExtraMap map[string]string `thrift:"extraMap,4" json:"extraMap,omitempty"`
}

func NewMessageIq() *MessageIq {
	return &MessageIq{}
}

var MessageIq_Tidlist_DEFAULT []string

func (p *MessageIq) GetTidlist() []string {
	return p.Tidlist
}

var MessageIq_Page_DEFAULT *Page

func (p *MessageIq) GetPage() *Page {
	if !p.IsSetPage() {
		return MessageIq_Page_DEFAULT
	}
	return p.Page
}

var MessageIq_Midlist_DEFAULT []string

func (p *MessageIq) GetMidlist() []string {
	return p.Midlist
}

var MessageIq_ExtraMap_DEFAULT map[string]string

func (p *MessageIq) GetExtraMap() map[string]string {
	return p.ExtraMap
}
func (p *MessageIq) IsSetTidlist() bool {
	return p.Tidlist != nil
}

func (p *MessageIq) IsSetPage() bool {
	return p.Page != nil
}

func (p *MessageIq) IsSetMidlist() bool {
	return p.Midlist != nil
}

func (p *MessageIq) IsSetExtraMap() bool {
	return p.ExtraMap != nil
}

func (p *MessageIq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MessageIq) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Tidlist = tSlice
	for i := 0; i < size; i++ {
		var _elem46 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem46 = v
		}
		p.Tidlist = append(p.Tidlist, _elem46)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MessageIq) readField2(iprot thrift.TProtocol) error {
	p.Page = &Page{}
	if err := p.Page.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Page), err)
	}
	return nil
}

func (p *MessageIq) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Midlist = tSlice
	for i := 0; i < size; i++ {
		var _elem47 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem47 = v
		}
		p.Midlist = append(p.Midlist, _elem47)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MessageIq) readField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.ExtraMap = tMap
	for i := 0; i < size; i++ {
		var _key48 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key48 = v
		}
		var _val49 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val49 = v
		}
		p.ExtraMap[_key48] = _val49
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *MessageIq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MessageIq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MessageIq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTidlist() {
		if err := oprot.WriteFieldBegin("tidlist", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tidlist: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Tidlist)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Tidlist {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tidlist: ", p), err)
		}
	}
	return err
}

func (p *MessageIq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err := oprot.WriteFieldBegin("age", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:age: ", p), err)
		}
		if err := p.Page.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Page), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:age: ", p), err)
		}
	}
	return err
}

func (p *MessageIq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMidlist() {
		if err := oprot.WriteFieldBegin("midlist", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:midlist: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Midlist)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Midlist {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:midlist: ", p), err)
		}
	}
	return err
}

func (p *MessageIq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtraMap() {
		if err := oprot.WriteFieldBegin("extraMap", thrift.MAP, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extraMap: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.ExtraMap {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extraMap: ", p), err)
		}
	}
	return err
}

func (p *MessageIq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageIq(%+v)", *p)
}

// Attributes:
//  - Domain: 域名
//  - Username: 用户名
//  - Pwd: 密码
type MyAuth struct {
	Domain   *string `thrift:"domain,1" json:"domain,omitempty"`
	Username *string `thrift:"username,2" json:"username,omitempty"`
	Pwd      *string `thrift:"pwd,3" json:"pwd,omitempty"`
}

func NewMyAuth() *MyAuth {
	return &MyAuth{}
}

var Auth_Domain_DEFAULT string

func (p *MyAuth) GetDomain() string {
	if !p.IsSetDomain() {
		return Auth_Domain_DEFAULT
	}
	return *p.Domain
}

var Auth_Username_DEFAULT string

func (p *MyAuth) GetUsername() string {
	if !p.IsSetUsername() {
		return Auth_Username_DEFAULT
	}
	return *p.Username
}

var Auth_Pwd_DEFAULT string

func (p *MyAuth) GetPwd() string {
	if !p.IsSetPwd() {
		return Auth_Pwd_DEFAULT
	}
	return *p.Pwd
}
func (p *MyAuth) IsSetDomain() bool {
	return p.Domain != nil
}

func (p *MyAuth) IsSetUsername() bool {
	return p.Username != nil
}

func (p *MyAuth) IsSetPwd() bool {
	return p.Pwd != nil
}

func (p *MyAuth) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MyAuth) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Domain = &v
	}
	return nil
}

func (p *MyAuth) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Username = &v
	}
	return nil
}

func (p *MyAuth) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Pwd = &v
	}
	return nil
}

func (p *MyAuth) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Auth"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MyAuth) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDomain() {
		if err := oprot.WriteFieldBegin("domain", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:domain: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Domain)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.domain (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:domain: ", p), err)
		}
	}
	return err
}

func (p *MyAuth) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsername() {
		if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Username)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err)
		}
	}
	return err
}

func (p *MyAuth) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPwd() {
		if err := oprot.WriteFieldBegin("pwd", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pwd: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Pwd)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pwd (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pwd: ", p), err)
		}
	}
	return err
}

func (p *MyAuth) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Auth(%+v)", *p)
}

// Attributes:
//  - ThreadId
//  - MBeanList: 信息列表
//  - ReqType: 类型
//  - ExtraMap
type MBeanList struct {
	ThreadId  string            `thrift:"threadId,1,required" json:"threadId"`
	MBeanList []*MBean          `thrift:"timMBeanList,2" json:"timMBeanList,omitempty"`
	ReqType   *string           `thrift:"reqType,3" json:"reqType,omitempty"`
	ExtraMap  map[string]string `thrift:"extraMap,4" json:"extraMap,omitempty"`
}

func NewMBeanList() *MBeanList {
	return &MBeanList{}
}

func (p *MBeanList) GetThreadId() string {
	return p.ThreadId
}

var MBeanList_MBeanList_DEFAULT []*MBean

func (p *MBeanList) GetMBeanList() []*MBean {
	return p.MBeanList
}

var MBeanList_ReqType_DEFAULT string

func (p *MBeanList) GetReqType() string {
	if !p.IsSetReqType() {
		return MBeanList_ReqType_DEFAULT
	}
	return *p.ReqType
}

var MBeanList_ExtraMap_DEFAULT map[string]string

func (p *MBeanList) GetExtraMap() map[string]string {
	return p.ExtraMap
}
func (p *MBeanList) IsSetMBeanList() bool {
	return p.MBeanList != nil
}

func (p *MBeanList) IsSetReqType() bool {
	return p.ReqType != nil
}

func (p *MBeanList) IsSetExtraMap() bool {
	return p.ExtraMap != nil
}

func (p *MBeanList) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetThreadId bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetThreadId = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetThreadId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ThreadId is not set"))
	}
	return nil
}

func (p *MBeanList) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ThreadId = v
	}
	return nil
}

func (p *MBeanList) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*MBean, 0, size)
	p.MBeanList = tSlice
	for i := 0; i < size; i++ {
		_elem50 := &MBean{}
		if err := _elem50.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem50), err)
		}
		p.MBeanList = append(p.MBeanList, _elem50)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MBeanList) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ReqType = &v
	}
	return nil
}

func (p *MBeanList) readField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.ExtraMap = tMap
	for i := 0; i < size; i++ {
		var _key51 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key51 = v
		}
		var _val52 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val52 = v
		}
		p.ExtraMap[_key51] = _val52
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *MBeanList) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MBeanList"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MBeanList) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("threadId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:threadId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ThreadId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.threadId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:threadId: ", p), err)
	}
	return err
}

func (p *MBeanList) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMBeanList() {
		if err := oprot.WriteFieldBegin("timMBeanList", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timMBeanList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MBeanList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.MBeanList {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timMBeanList: ", p), err)
		}
	}
	return err
}

func (p *MBeanList) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetReqType() {
		if err := oprot.WriteFieldBegin("reqType", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reqType: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ReqType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.reqType (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reqType: ", p), err)
		}
	}
	return err
}

func (p *MBeanList) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtraMap() {
		if err := oprot.WriteFieldBegin("extraMap", thrift.MAP, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extraMap: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.ExtraMap {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extraMap: ", p), err)
		}
	}
	return err
}

func (p *MBeanList) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MBeanList(%+v)", *p)
}

// Attributes:
//  - ThreadId
//  - PBeanList: 状态信息列表
//  - ReqType: 类型
//  - ExtraMap
type PBeanList struct {
	ThreadId  string            `thrift:"threadId,1,required" json:"threadId"`
	PBeanList []*PBean          `thrift:"timBeanList,2" json:"timBeanList,omitempty"`
	ReqType   *string           `thrift:"reqType,3" json:"reqType,omitempty"`
	ExtraMap  map[string]string `thrift:"extraMap,4" json:"extraMap,omitempty"`
}

func NewPBeanList() *PBeanList {
	return &PBeanList{}
}

func (p *PBeanList) GetThreadId() string {
	return p.ThreadId
}

var PBeanList_PBeanList_DEFAULT []*PBean

func (p *PBeanList) GetPBeanList() []*PBean {
	return p.PBeanList
}

var PBeanList_ReqType_DEFAULT string

func (p *PBeanList) GetReqType() string {
	if !p.IsSetReqType() {
		return PBeanList_ReqType_DEFAULT
	}
	return *p.ReqType
}

var PBeanList_ExtraMap_DEFAULT map[string]string

func (p *PBeanList) GetExtraMap() map[string]string {
	return p.ExtraMap
}
func (p *PBeanList) IsSetPBeanList() bool {
	return p.PBeanList != nil
}

func (p *PBeanList) IsSetReqType() bool {
	return p.ReqType != nil
}

func (p *PBeanList) IsSetExtraMap() bool {
	return p.ExtraMap != nil
}

func (p *PBeanList) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetThreadId bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetThreadId = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetThreadId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ThreadId is not set"))
	}
	return nil
}

func (p *PBeanList) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ThreadId = v
	}
	return nil
}

func (p *PBeanList) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*PBean, 0, size)
	p.PBeanList = tSlice
	for i := 0; i < size; i++ {
		_elem53 := &PBean{}
		if err := _elem53.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem53), err)
		}
		p.PBeanList = append(p.PBeanList, _elem53)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *PBeanList) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ReqType = &v
	}
	return nil
}

func (p *PBeanList) readField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.ExtraMap = tMap
	for i := 0; i < size; i++ {
		var _key54 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key54 = v
		}
		var _val55 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val55 = v
		}
		p.ExtraMap[_key54] = _val55
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *PBeanList) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PBeanList"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PBeanList) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("threadId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:threadId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ThreadId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.threadId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:threadId: ", p), err)
	}
	return err
}

func (p *PBeanList) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPBeanList() {
		if err := oprot.WriteFieldBegin("timBeanList", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timBeanList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PBeanList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.PBeanList {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timBeanList: ", p), err)
		}
	}
	return err
}

func (p *PBeanList) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetReqType() {
		if err := oprot.WriteFieldBegin("reqType", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reqType: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ReqType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.reqType (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reqType: ", p), err)
		}
	}
	return err
}

func (p *PBeanList) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtraMap() {
		if err := oprot.WriteFieldBegin("extraMap", thrift.MAP, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extraMap: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.ExtraMap {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extraMap: ", p), err)
		}
	}
	return err
}

func (p *PBeanList) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PBeanList(%+v)", *p)
}

// Attributes:
//  - ThreadId
//  - Interflow: 消息合流
//  - TLS: tls
type PropertyBean struct {
	ThreadId  *string `thrift:"threadId,1" json:"threadId,omitempty"`
	Interflow *string `thrift:"interflow,2" json:"interflow,omitempty"`
	TLS       *string `thrift:"tls,3" json:"tls,omitempty"`
}

func NewPropertyBean() *PropertyBean {
	return &PropertyBean{}
}

var PropertyBean_ThreadId_DEFAULT string

func (p *PropertyBean) GetThreadId() string {
	if !p.IsSetThreadId() {
		return PropertyBean_ThreadId_DEFAULT
	}
	return *p.ThreadId
}

var PropertyBean_Interflow_DEFAULT string

func (p *PropertyBean) GetInterflow() string {
	if !p.IsSetInterflow() {
		return PropertyBean_Interflow_DEFAULT
	}
	return *p.Interflow
}

var PropertyBean_TLS_DEFAULT string

func (p *PropertyBean) GetTLS() string {
	if !p.IsSetTLS() {
		return PropertyBean_TLS_DEFAULT
	}
	return *p.TLS
}
func (p *PropertyBean) IsSetThreadId() bool {
	return p.ThreadId != nil
}

func (p *PropertyBean) IsSetInterflow() bool {
	return p.Interflow != nil
}

func (p *PropertyBean) IsSetTLS() bool {
	return p.TLS != nil
}

func (p *PropertyBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PropertyBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ThreadId = &v
	}
	return nil
}

func (p *PropertyBean) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Interflow = &v
	}
	return nil
}

func (p *PropertyBean) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TLS = &v
	}
	return nil
}

func (p *PropertyBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PropertyBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PropertyBean) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetThreadId() {
		if err := oprot.WriteFieldBegin("threadId", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:threadId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ThreadId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.threadId (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:threadId: ", p), err)
		}
	}
	return err
}

func (p *PropertyBean) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInterflow() {
		if err := oprot.WriteFieldBegin("interflow", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:interflow: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Interflow)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.interflow (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:interflow: ", p), err)
		}
	}
	return err
}

func (p *PropertyBean) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTLS() {
		if err := oprot.WriteFieldBegin("tls", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tls: ", p), err)
		}
		if err := oprot.WriteString(string(*p.TLS)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.tls (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tls: ", p), err)
		}
	}
	return err
}

func (p *PropertyBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PropertyBean(%+v)", *p)
}
