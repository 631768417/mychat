// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package protocol

import (
	"bytes"
	"fmt"

	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type ITim interface {
	// 流程开始
	//
	// Parameters:
	//  - Param
	Stream(param *Param) (err error)
	// tls协议
	Starttls() (err error)
	// 登陆协议
	//
	// Parameters:
	//  - Tid
	//  - Pwd
	Login(tid *Tid, pwd string) (err error)
	// 回执信息
	//
	// Parameters:
	//  - Ab
	Ack(ab *AckBean) (err error)
	// 广播出席协议或接收广播协议
	//
	// Parameters:
	//  - Pbean
	Presence(pbean *PBean) (err error)
	// 发送信息或接收信息
	//
	// Parameters:
	//  - Mbean
	Message(mbean *MBean) (err error)
	// ping 心跳协议
	//
	// Parameters:
	//  - ThreadId
	Ping(threadId string) (err error)
	// 错误通知
	//
	// Parameters:
	//  - E
	Error(e *Error) (err error)
	// 登出协议
	Logout() (err error)
	// 注册协议
	//
	// Parameters:
	//  - Tid
	//  - Auth
	Regist(tid *Tid, auth string) (err error)
	// 花名册
	//
	// Parameters:
	//  - Roster
	Roser(roster *Roster) (err error)
	// 发送信息或接收信息列表（合流）
	//
	// Parameters:
	//  - MbeanList
	MessageList(mbeanList *MBeanList) (err error)
	// 发送状态信息列表（合流）
	//
	// Parameters:
	//  - PbeanList
	PresenceList(pbeanList *PBeanList) (err error)
	// 信息请求 get请求数据 del删除
	//
	// Parameters:
	//  - msgIq
	//  - IqType
	MessageIq(msgIq *MessageIq, iqType string) (err error)
	// 信息请求
	//
	// Parameters:
	//  - Mbean
	MessageResult_(mbean *MBean) (err error)
	// 用户协议属性请求
	//
	// Parameters:
	//  - Tpb
	Property(tpb *PropertyBean) (err error)
	// 请求远程验证信息
	//
	// Parameters:
	//  - Tid
	//  - Pwd
	//  - Auth
	RemoteUserAuth(tid *Tid, pwd string, auth *MyAuth) (r *RemoteUserBean, err error)
	// 请求远程用户信息
	//
	// Parameters:
	//  - Tid
	//  - Auth
	RemoteUserGet(tid *Tid, auth *MyAuth) (r *RemoteUserBean, err error)
	// 编辑远程用户信息
	//
	// Parameters:
	//  - Tid
	//  - Ub
	//  - Auth
	RemoteUserEdit(tid *Tid, ub *UserBean, auth *MyAuth) (r *RemoteUserBean, err error)
	// 广播出席协议或接收广播协议
	//
	// Parameters:
	//  - Pbean
	//  - Auth
	ResponsePresence(pbean *PBean, auth *MyAuth) (r *ResponseBean, err error)
	// 发送信息或接收信息
	//
	// Parameters:
	//  - Mbean
	//  - Auth
	ResponseMessage(mbean *MBean, auth *MyAuth) (r *ResponseBean, err error)
	// 信息请求 get请求数据 del删除（辅助接口）
	//
	// Parameters:
	//  - msgIq
	//  - IqType
	//  - Auth
	ResponseMessageIq(msgIq *MessageIq, iqType string, auth *MyAuth) (r *MBeanList, err error)
	// 广播出席协议或接收广播协议
	//
	// Parameters:
	//  - PbeanList
	//  - Auth
	ResponsePresenceList(pbeanList *PBeanList, auth *MyAuth) (r *ResponseBean, err error)
	// 发送信息或接收信息
	//
	// Parameters:
	//  - MbeanList
	//  - Auth
	ResponseMessageList(mbeanList *MBeanList, auth *MyAuth) (r *ResponseBean, err error)
}

type IClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewIClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *IClient {
	return &IClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewIClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *IClient {
	return &IClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// 流程开始
//
// Parameters:
//  - Param
func (p *IClient) Stream(param *Param) (err error) {
	if err = p.sendStream(param); err != nil {
		return
	}
	return
}

func (p *IClient) sendStream(param *Param) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("stream", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := IStreamArgs{
		Param: param,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// tls协议
func (p *IClient) Starttls() (err error) {
	if err = p.sendStarttls(); err != nil {
		return
	}
	return
}

func (p *IClient) sendStarttls() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("starttls", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := IStarttlsArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// 登陆协议
//
// Parameters:
//  - Tid
//  - Pwd
func (p *IClient) Login(tid *Tid, pwd string) (err error) {
	if err = p.sendLogin(tid, pwd); err != nil {
		return
	}
	return
}

func (p *IClient) sendLogin(tid *Tid, pwd string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	//不等待成功 直接返回 非阻塞
	if err = oprot.WriteMessageBegin("login", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := ILoginArgs{
		Tid: tid,
		Pwd: pwd,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	//flush 刷新管道
	return oprot.Flush()
}

// 回执信息
//
// Parameters:
//  - Ab
func (p *IClient) Ack(ab *AckBean) (err error) {
	if err = p.sendAck(ab); err != nil {
		return
	}
	return
}

func (p *IClient) sendAck(ab *AckBean) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("ack", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := IAckArgs{
		Ab: ab,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// 广播出席协议或接收广播协议
//
// Parameters:
//  - Pbean
func (p *IClient) Presence(pbean *PBean) (err error) {
	if err = p.sendPresence(pbean); err != nil {
		return
	}
	return
}

func (p *IClient) sendPresence(pbean *PBean) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("presence", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := IPresenceArgs{
		Pbean: pbean,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// 发送信息或接收信息
//
// Parameters:
//  - Mbean
func (p *IClient) Message(mbean *MBean) (err error) {
	if err = p.sendMessage(mbean); err != nil {
		return
	}
	return
}

func (p *IClient) sendMessage(mbean *MBean) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("message", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := IMessageArgs{
		Mbean: mbean,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// ping 心跳协议
//
// Parameters:
//  - ThreadId
func (p *IClient) Ping(threadId string) (err error) {
	if err = p.sendPing(threadId); err != nil {
		return
	}
	return
}

func (p *IClient) sendPing(threadId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("ping", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := IPingArgs{
		ThreadId: threadId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// 错误通知
//
// Parameters:
//  - E
func (p *IClient) Error(e *Error) (err error) {
	if err = p.sendError(e); err != nil {
		return
	}
	return
}

func (p *IClient) sendError(e *Error) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("error", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := IErrorArgs{
		E: e,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// 登出协议
func (p *IClient) Logout() (err error) {
	if err = p.sendLogout(); err != nil {
		return
	}
	return
}

func (p *IClient) sendLogout() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("logout", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := ILogoutArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// 注册协议
//
// Parameters:
//  - Tid
//  - Auth
func (p *IClient) Regist(tid *Tid, auth string) (err error) {
	if err = p.sendRegist(tid, auth); err != nil {
		return
	}
	return
}

func (p *IClient) sendRegist(tid *Tid, auth string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("regist", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := IRegistArgs{
		Tid:  tid,
		Auth: auth,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// 花名册
//
// Parameters:
//  - Roster
func (p *IClient) Roser(roster *Roster) (err error) {
	if err = p.sendRoser(roster); err != nil {
		return
	}
	return
}

func (p *IClient) sendRoser(roster *Roster) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("roser", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := IRoserArgs{
		Roster: roster,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// 发送信息或接收信息列表（合流）
//
// Parameters:
//  - MbeanList
func (p *IClient) MessageList(mbeanList *MBeanList) (err error) {
	if err = p.sendMessageList(mbeanList); err != nil {
		return
	}
	return
}

func (p *IClient) sendMessageList(mbeanList *MBeanList) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("messageList", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := IMessageListArgs{
		MbeanList: mbeanList,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// 发送状态信息列表（合流）
//
// Parameters:
//  - PbeanList
func (p *IClient) PresenceList(pbeanList *PBeanList) (err error) {
	if err = p.sendPresenceList(pbeanList); err != nil {
		return
	}
	return
}

func (p *IClient) sendPresenceList(pbeanList *PBeanList) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("presenceList", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := IPresenceListArgs{
		PbeanList: pbeanList,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	//打结束标记
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// 信息请求 get请求数据 del删除
//
// Parameters:
//  - msgIq
//  - IqType
func (p *IClient) MessageIq(msgIq *MessageIq, iqType string) (err error) {
	if err = p.sendMessageIq(msgIq, iqType); err != nil {
		return
	}
	return
}

func (p *IClient) sendMessageIq(msgIq *MessageIq, iqType string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("messageIq", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := IMessageIqArgs{
		msgIq:  msgIq,
		IqType: iqType,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// 信息请求
//
// Parameters:
//  - Mbean
func (p *IClient) MessageResult_(mbean *MBean) (err error) {
	if err = p.sendMessageResult_(mbean); err != nil {
		return
	}
	return
}

func (p *IClient) sendMessageResult_(mbean *MBean) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("messageResult", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := IMessageResultArgs{
		Mbean: mbean,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// 用户协议属性请求
//
// Parameters:
//  - Tpb
func (p *IClient) Property(tpb *PropertyBean) (err error) {
	if err = p.sendProperty(tpb); err != nil {
		return
	}
	return
}

func (p *IClient) sendProperty(tpb *PropertyBean) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("property", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := IPropertyArgs{
		Tpb: tpb,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// 请求远程验证信息
//
// Parameters:
//  - Tid
//  - Pwd
//  - Auth
func (p *IClient) RemoteUserAuth(tid *Tid, pwd string, auth *MyAuth) (r *RemoteUserBean, err error) {
	if err = p.sendRemoteUserAuth(tid, pwd, auth); err != nil {
		return
	}
	return p.recvRemoteUserAuth()
}

func (p *IClient) sendRemoteUserAuth(tid *Tid, pwd string, auth *MyAuth) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("remoteUserAuth", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IRemoteUserAuthArgs{
		Tid:  tid,
		Pwd:  pwd,
		Auth: auth,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IClient) recvRemoteUserAuth() (value *RemoteUserBean, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "remoteUserAuth" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "remoteUserAuth failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "remoteUserAuth failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error56 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error57 error
		error57, err = error56.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error57
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "remoteUserAuth failed: invalid message type")
		return
	}
	result := IRemoteUserAuthResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// 请求远程用户信息
//
// Parameters:
//  - Tid
//  - Auth
func (p *IClient) RemoteUserGet(tid *Tid, auth *MyAuth) (r *RemoteUserBean, err error) {
	if err = p.sendRemoteUserGet(tid, auth); err != nil {
		return
	}
	return p.recvRemoteUserGet()
}

func (p *IClient) sendRemoteUserGet(tid *Tid, auth *MyAuth) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("remoteUserGet", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IRemoteUserGetArgs{
		Tid:  tid,
		Auth: auth,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IClient) recvRemoteUserGet() (value *RemoteUserBean, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "remoteUserGet" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "remoteUserGet failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "remoteUserGet failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error58 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error59 error
		error59, err = error58.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error59
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "remoteUserGet failed: invalid message type")
		return
	}
	result := IRemoteUserGetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// 编辑远程用户信息
//
// Parameters:
//  - Tid
//  - Ub
//  - Auth
func (p *IClient) RemoteUserEdit(tid *Tid, ub *UserBean, auth *MyAuth) (r *RemoteUserBean, err error) {
	if err = p.sendRemoteUserEdit(tid, ub, auth); err != nil {
		return
	}
	return p.recvRemoteUserEdit()
}

func (p *IClient) sendRemoteUserEdit(tid *Tid, ub *UserBean, auth *MyAuth) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("remoteUserEdit", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IRemoteUserEditArgs{
		Tid:  tid,
		Ub:   ub,
		Auth: auth,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IClient) recvRemoteUserEdit() (value *RemoteUserBean, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "remoteUserEdit" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "remoteUserEdit failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "remoteUserEdit failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error60 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error61 error
		error61, err = error60.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error61
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "remoteUserEdit failed: invalid message type")
		return
	}
	result := IRemoteUserEditResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// 广播出席协议或接收广播协议
//
// Parameters:
//  - Pbean
//  - Auth
func (p *IClient) ResponsePresence(pbean *PBean, auth *MyAuth) (r *ResponseBean, err error) {
	if err = p.sendResponsePresence(pbean, auth); err != nil {
		return
	}
	return p.recvResponsePresence()
}

func (p *IClient) sendResponsePresence(pbean *PBean, auth *MyAuth) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("responsePresence", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IResponsePresenceArgs{
		Pbean: pbean,
		Auth:  auth,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IClient) recvResponsePresence() (value *ResponseBean, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "responsePresence" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "responsePresence failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "responsePresence failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error62 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error63 error
		error63, err = error62.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error63
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "responsePresence failed: invalid message type")
		return
	}
	result := IResponsePresenceResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// 发送信息或接收信息
//
// Parameters:
//  - Mbean
//  - Auth
func (p *IClient) ResponseMessage(mbean *MBean, auth *MyAuth) (r *ResponseBean, err error) {
	if err = p.sendResponseMessage(mbean, auth); err != nil {
		return
	}
	return p.recvResponseMessage()
}

func (p *IClient) sendResponseMessage(mbean *MBean, auth *MyAuth) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("responseMessage", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IResponseMessageArgs{
		Mbean: mbean,
		Auth:  auth,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IClient) recvResponseMessage() (value *ResponseBean, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "responseMessage" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "responseMessage failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "responseMessage failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error64 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error65 error
		error65, err = error64.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error65
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "responseMessage failed: invalid message type")
		return
	}
	result := IResponseMessageResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// 信息请求 get请求数据 del删除（辅助接口）
//
// Parameters:
//  - msgIq
//  - IqType
//  - Auth
func (p *IClient) ResponseMessageIq(msgIq *MessageIq, iqType string, auth *MyAuth) (r *MBeanList, err error) {
	if err = p.sendResponseMessageIq(msgIq, iqType, auth); err != nil {
		return
	}
	return p.recvResponseMessageIq()
}

func (p *IClient) sendResponseMessageIq(msgIq *MessageIq, iqType string, auth *MyAuth) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("responseMessageIq", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IResponseMessageIqArgs{
		msgIq:  msgIq,
		IqType: iqType,
		Auth:   auth,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IClient) recvResponseMessageIq() (value *MBeanList, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "responseMessageIq" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "responseMessageIq failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "responseMessageIq failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error66 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error67 error
		error67, err = error66.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error67
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "responseMessageIq failed: invalid message type")
		return
	}
	result := IResponseMessageIqResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// 广播出席协议或接收广播协议
//
// Parameters:
//  - PbeanList
//  - Auth
func (p *IClient) ResponsePresenceList(pbeanList *PBeanList, auth *MyAuth) (r *ResponseBean, err error) {
	if err = p.sendResponsePresenceList(pbeanList, auth); err != nil {
		return
	}
	return p.recvResponsePresenceList()
}

func (p *IClient) sendResponsePresenceList(pbeanList *PBeanList, auth *MyAuth) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("responsePresenceList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IResponsePresenceListArgs{
		PbeanList: pbeanList,
		Auth:      auth,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IClient) recvResponsePresenceList() (value *ResponseBean, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "responsePresenceList" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "responsePresenceList failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "responsePresenceList failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error68 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error69 error
		error69, err = error68.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error69
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "responsePresenceList failed: invalid message type")
		return
	}
	result := IResponsePresenceListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// 发送信息或接收信息
//
// Parameters:
//  - MbeanList
//  - Auth
func (p *IClient) ResponseMessageList(mbeanList *MBeanList, auth *MyAuth) (r *ResponseBean, err error) {
	if err = p.sendResponseMessageList(mbeanList, auth); err != nil {
		return
	}
	return p.recvResponseMessageList()
}

func (p *IClient) sendResponseMessageList(mbeanList *MBeanList, auth *MyAuth) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("responseMessageList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IResponseMessageListArgs{
		MbeanList: mbeanList,
		Auth:      auth,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IClient) recvResponseMessageList() (value *ResponseBean, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "responseMessageList" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "responseMessageList failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "responseMessageList failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error70 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error71 error
		error71, err = error70.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error71
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "responseMessageList failed: invalid message type")
		return
	}
	result := IResponseMessageListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type IProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ITim
}

func (p *IProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *IProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *IProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

//设置RPC接口 和处理器
func NewIProcessor(handler ITim) *IProcessor {

	//其中各个实现类的 read方法都是告诉协议如何去解码

	//process 主要工作流程如下：
	//从连接中读取数据（使用输入protocol）
	//将处理授权给handler（由用户实现）
	//最后将结果写到连接上（使用输出protocol）

	self72 := &IProcessor{
		handler:      handler,
		processorMap: make(map[string]thrift.TProcessorFunction)}

	self72.processorMap["stream"] = &iProcessorStream{handler: handler}
	self72.processorMap["starttls"] = &iProcessorStarttls{handler: handler}
	self72.processorMap["login"] = &iProcessorLogin{handler: handler}
	self72.processorMap["ack"] = &iProcessorAck{handler: handler}
	self72.processorMap["presence"] = &iProcessorPresence{handler: handler}
	self72.processorMap["message"] = &iProcessorMessage{handler: handler}
	self72.processorMap["ping"] = &iProcessorPing{handler: handler}
	self72.processorMap["error"] = &iProcessorError{handler: handler}
	self72.processorMap["logout"] = &iProcessorLogout{handler: handler}
	self72.processorMap["regist"] = &iProcessorRegist{handler: handler}
	self72.processorMap["roser"] = &iProcessorRoser{handler: handler}
	self72.processorMap["messageList"] = &iProcessorMessageList{handler: handler}
	self72.processorMap["presenceList"] = &iProcessorPresenceList{handler: handler}
	self72.processorMap["messageIq"] = &iProcessorMessageIq{handler: handler}
	self72.processorMap["messageResult"] = &iProcessorMessageResult_{handler: handler}
	self72.processorMap["property"] = &iProcessorProperty{handler: handler}
	self72.processorMap["remoteUserAuth"] = &iProcessorRemoteUserAuth{handler: handler}
	self72.processorMap["remoteUserGet"] = &iProcessorRemoteUserGet{handler: handler}
	self72.processorMap["remoteUserEdit"] = &iProcessorRemoteUserEdit{handler: handler}
	self72.processorMap["responsePresence"] = &iProcessorResponsePresence{handler: handler}
	self72.processorMap["responseMessage"] = &iProcessorResponseMessage{handler: handler}
	self72.processorMap["responseMessageIq"] = &iProcessorResponseMessageIq{handler: handler}
	self72.processorMap["responsePresenceList"] = &iProcessorResponsePresenceList{handler: handler}
	self72.processorMap["responseMessageList"] = &iProcessorResponseMessageList{handler: handler}
	return self72
}

func (p *IProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x73 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x73.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x73

}

type iProcessorStream struct {
	handler ITim
}

func (p *iProcessorStream) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IStreamArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.Stream(args.Param); err2 != nil {
		return true, err2
	}
	return true, nil
}

type iProcessorStarttls struct {
	handler ITim
}

func (p *iProcessorStarttls) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IStarttlsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.Starttls(); err2 != nil {
		return true, err2
	}
	return true, nil
}

type iProcessorLogin struct {
	handler ITim
}

func (p *iProcessorLogin) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ILoginArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.Login(args.Tid, args.Pwd); err2 != nil {
		return true, err2
	}
	return true, nil
}

type iProcessorAck struct {
	handler ITim
}

func (p *iProcessorAck) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IAckArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.Ack(args.Ab); err2 != nil {
		return true, err2
	}
	return true, nil
}

type iProcessorPresence struct {
	handler ITim
}

func (p *iProcessorPresence) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IPresenceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.Presence(args.Pbean); err2 != nil {
		return true, err2
	}
	return true, nil
}

type iProcessorMessage struct {
	handler ITim
}

func (p *iProcessorMessage) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IMessageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.Message(args.Mbean); err2 != nil {
		return true, err2
	}
	return true, nil
}

type iProcessorPing struct {
	handler ITim
}

func (p *iProcessorPing) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IPingArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.Ping(args.ThreadId); err2 != nil {
		return true, err2
	}
	return true, nil
}

type iProcessorError struct {
	handler ITim
}

func (p *iProcessorError) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IErrorArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.Error(args.E); err2 != nil {
		return true, err2
	}
	return true, nil
}

type iProcessorLogout struct {
	handler ITim
}

func (p *iProcessorLogout) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ILogoutArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.Logout(); err2 != nil {
		return true, err2
	}
	return true, nil
}

type iProcessorRegist struct {
	handler ITim
}

func (p *iProcessorRegist) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IRegistArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.Regist(args.Tid, args.Auth); err2 != nil {
		return true, err2
	}
	return true, nil
}

type iProcessorRoser struct {
	handler ITim
}

func (p *iProcessorRoser) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IRoserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.Roser(args.Roster); err2 != nil {
		return true, err2
	}
	return true, nil
}

type iProcessorMessageList struct {
	handler ITim
}

func (p *iProcessorMessageList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IMessageListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.MessageList(args.MbeanList); err2 != nil {
		return true, err2
	}
	return true, nil
}

type iProcessorPresenceList struct {
	handler ITim
}

func (p *iProcessorPresenceList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IPresenceListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.PresenceList(args.PbeanList); err2 != nil {
		return true, err2
	}
	return true, nil
}

type iProcessorMessageIq struct {
	handler ITim
}

func (p *iProcessorMessageIq) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IMessageIqArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.MessageIq(args.msgIq, args.IqType); err2 != nil {
		return true, err2
	}
	return true, nil
}

type iProcessorMessageResult_ struct {
	handler ITim
}

func (p *iProcessorMessageResult_) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IMessageResultArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.MessageResult_(args.Mbean); err2 != nil {
		return true, err2
	}
	return true, nil
}

type iProcessorProperty struct {
	handler ITim
}

func (p *iProcessorProperty) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IPropertyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.Property(args.Tpb); err2 != nil {
		return true, err2
	}
	return true, nil
}

type iProcessorRemoteUserAuth struct {
	handler ITim
}

func (p *iProcessorRemoteUserAuth) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IRemoteUserAuthArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("remoteUserAuth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IRemoteUserAuthResult{}
	var retval *RemoteUserBean
	var err2 error
	if retval, err2 = p.handler.RemoteUserAuth(args.Tid, args.Pwd, args.Auth); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing remoteUserAuth: "+err2.Error())
		oprot.WriteMessageBegin("remoteUserAuth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("remoteUserAuth", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iProcessorRemoteUserGet struct {
	handler ITim
}

func (p *iProcessorRemoteUserGet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IRemoteUserGetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("remoteUserGet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IRemoteUserGetResult{}
	var retval *RemoteUserBean
	var err2 error
	if retval, err2 = p.handler.RemoteUserGet(args.Tid, args.Auth); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing remoteUserGet: "+err2.Error())
		oprot.WriteMessageBegin("remoteUserGet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("remoteUserGet", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iProcessorRemoteUserEdit struct {
	handler ITim
}

func (p *iProcessorRemoteUserEdit) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IRemoteUserEditArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("remoteUserEdit", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IRemoteUserEditResult{}
	var retval *RemoteUserBean
	var err2 error
	if retval, err2 = p.handler.RemoteUserEdit(args.Tid, args.Ub, args.Auth); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing remoteUserEdit: "+err2.Error())
		oprot.WriteMessageBegin("remoteUserEdit", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("remoteUserEdit", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iProcessorResponsePresence struct {
	handler ITim
}

func (p *iProcessorResponsePresence) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IResponsePresenceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("responsePresence", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IResponsePresenceResult{}
	var retval *ResponseBean
	var err2 error
	if retval, err2 = p.handler.ResponsePresence(args.Pbean, args.Auth); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing responsePresence: "+err2.Error())
		oprot.WriteMessageBegin("responsePresence", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("responsePresence", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iProcessorResponseMessage struct {
	handler ITim
}

func (p *iProcessorResponseMessage) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IResponseMessageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("responseMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IResponseMessageResult{}
	var retval *ResponseBean
	var err2 error
	if retval, err2 = p.handler.ResponseMessage(args.Mbean, args.Auth); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing responseMessage: "+err2.Error())
		oprot.WriteMessageBegin("responseMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("responseMessage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iProcessorResponseMessageIq struct {
	handler ITim
}

func (p *iProcessorResponseMessageIq) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IResponseMessageIqArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("responseMessageIq", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IResponseMessageIqResult{}
	var retval *MBeanList
	var err2 error
	if retval, err2 = p.handler.ResponseMessageIq(args.msgIq, args.IqType, args.Auth); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing responseMessageIq: "+err2.Error())
		oprot.WriteMessageBegin("responseMessageIq", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("responseMessageIq", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iProcessorResponsePresenceList struct {
	handler ITim
}

func (p *iProcessorResponsePresenceList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IResponsePresenceListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("responsePresenceList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IResponsePresenceListResult{}
	var retval *ResponseBean
	var err2 error
	if retval, err2 = p.handler.ResponsePresenceList(args.PbeanList, args.Auth); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing responsePresenceList: "+err2.Error())
		oprot.WriteMessageBegin("responsePresenceList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("responsePresenceList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iProcessorResponseMessageList struct {
	handler ITim
}

func (p *iProcessorResponseMessageList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IResponseMessageListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("responseMessageList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IResponseMessageListResult{}
	var retval *ResponseBean
	var err2 error
	if retval, err2 = p.handler.ResponseMessageList(args.MbeanList, args.Auth); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing responseMessageList: "+err2.Error())
		oprot.WriteMessageBegin("responseMessageList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("responseMessageList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Param
type IStreamArgs struct {
	Param *Param `thrift:"param,1" json:"param"`
}

func NewIStreamArgs() *IStreamArgs {
	return &IStreamArgs{}
}

var IStreamArgs_Param_DEFAULT *Param

func (p *IStreamArgs) GetParam() *Param {
	if !p.IsSetParam() {
		return IStreamArgs_Param_DEFAULT
	}
	return p.Param
}
func (p *IStreamArgs) IsSetParam() bool {
	return p.Param != nil
}

func (p *IStreamArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IStreamArgs) readField1(iprot thrift.TProtocol) error {
	p.Param = &Param{}
	if err := p.Param.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Param), err)
	}
	return nil
}

func (p *IStreamArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("stream_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IStreamArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("param", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:param: ", p), err)
	}
	if err := p.Param.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Param), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:param: ", p), err)
	}
	return err
}

func (p *IStreamArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IStreamArgs(%+v)", *p)
}

type IStarttlsArgs struct {
}

func NewIStarttlsArgs() *IStarttlsArgs {
	return &IStarttlsArgs{}
}

func (p *IStarttlsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IStarttlsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("starttls_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IStarttlsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IStarttlsArgs(%+v)", *p)
}

// Attributes:
//  - Tid
//  - Pwd
type ILoginArgs struct {
	Tid *Tid   `thrift:"tid,1" json:"tid"`
	Pwd string `thrift:"pwd,2" json:"pwd"`
}

func NewILoginArgs() *ILoginArgs {
	return &ILoginArgs{}
}

var ILoginArgs_Tid_DEFAULT *Tid

func (p *ILoginArgs) GetTid() *Tid {
	if !p.IsSetTid() {
		return ILoginArgs_Tid_DEFAULT
	}
	return p.Tid
}

func (p *ILoginArgs) GetPwd() string {
	return p.Pwd
}
func (p *ILoginArgs) IsSetTid() bool {
	return p.Tid != nil
}

func (p *ILoginArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ILoginArgs) readField1(iprot thrift.TProtocol) error {
	p.Tid = &Tid{}
	if err := p.Tid.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tid), err)
	}
	return nil
}

func (p *ILoginArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Pwd = v
	}
	return nil
}

func (p *ILoginArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("login_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ILoginArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tid", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tid: ", p), err)
	}
	if err := p.Tid.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tid), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tid: ", p), err)
	}
	return err
}

func (p *ILoginArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pwd", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pwd: ", p), err)
	}
	if err := oprot.WriteString(string(p.Pwd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pwd (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pwd: ", p), err)
	}
	return err
}

func (p *ILoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ILoginArgs(%+v)", *p)
}

// Attributes:
//  - Ab
type IAckArgs struct {
	Ab *AckBean `thrift:"ab,1" json:"ab"`
}

func NewIAckArgs() *IAckArgs {
	return &IAckArgs{}
}

var IAckArgs_Ab_DEFAULT *AckBean

func (p *IAckArgs) GetAb() *AckBean {
	if !p.IsSetAb() {
		return IAckArgs_Ab_DEFAULT
	}
	return p.Ab
}
func (p *IAckArgs) IsSetAb() bool {
	return p.Ab != nil
}

func (p *IAckArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IAckArgs) readField1(iprot thrift.TProtocol) error {
	p.Ab = &AckBean{}
	if err := p.Ab.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ab), err)
	}
	return nil
}

func (p *IAckArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ack_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IAckArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ab", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ab: ", p), err)
	}
	if err := p.Ab.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ab), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ab: ", p), err)
	}
	return err
}

func (p *IAckArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IAckArgs(%+v)", *p)
}

// Attributes:
//  - Pbean
type IPresenceArgs struct {
	Pbean *PBean `thrift:"pbean,1" json:"pbean"`
}

func NewIPresenceArgs() *IPresenceArgs {
	return &IPresenceArgs{}
}

var IPresenceArgs_Pbean_DEFAULT *PBean

func (p *IPresenceArgs) GetPbean() *PBean {
	if !p.IsSetPbean() {
		return IPresenceArgs_Pbean_DEFAULT
	}
	return p.Pbean
}
func (p *IPresenceArgs) IsSetPbean() bool {
	return p.Pbean != nil
}

func (p *IPresenceArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IPresenceArgs) readField1(iprot thrift.TProtocol) error {
	p.Pbean = &PBean{}
	if err := p.Pbean.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Pbean), err)
	}
	return nil
}

func (p *IPresenceArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("presence_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IPresenceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pbean", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pbean: ", p), err)
	}
	if err := p.Pbean.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Pbean), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pbean: ", p), err)
	}
	return err
}

func (p *IPresenceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IPresenceArgs(%+v)", *p)
}

// Attributes:
//  - Mbean
type IMessageArgs struct {
	Mbean *MBean `thrift:"mbean,1" json:"mbean"`
}

func NewIMessageArgs() *IMessageArgs {
	return &IMessageArgs{}
}

var IMessageArgs_Mbean_DEFAULT *MBean

func (p *IMessageArgs) GetMbean() *MBean {
	if !p.IsSetMbean() {
		return IMessageArgs_Mbean_DEFAULT
	}
	return p.Mbean
}
func (p *IMessageArgs) IsSetMbean() bool {
	return p.Mbean != nil
}

func (p *IMessageArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IMessageArgs) readField1(iprot thrift.TProtocol) error {
	p.Mbean = &MBean{}
	if err := p.Mbean.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Mbean), err)
	}
	return nil
}

func (p *IMessageArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("message_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mbean", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mbean: ", p), err)
	}
	if err := p.Mbean.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Mbean), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mbean: ", p), err)
	}
	return err
}

func (p *IMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IMessageArgs(%+v)", *p)
}

// Attributes:
//  - ThreadId
type IPingArgs struct {
	ThreadId string `thrift:"threadId,1" json:"threadId"`
}

func NewIPingArgs() *IPingArgs {
	return &IPingArgs{}
}

func (p *IPingArgs) GetThreadId() string {
	return p.ThreadId
}
func (p *IPingArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IPingArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ThreadId = v
	}
	return nil
}

func (p *IPingArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ping_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IPingArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("threadId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:threadId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ThreadId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.threadId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:threadId: ", p), err)
	}
	return err
}

func (p *IPingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IPingArgs(%+v)", *p)
}

// Attributes:
//  - E
type IErrorArgs struct {
	E *Error `thrift:"e,1" json:"e"`
}

func NewIErrorArgs() *IErrorArgs {
	return &IErrorArgs{}
}

var IErrorArgs_E_DEFAULT *Error

func (p *IErrorArgs) GetE() *Error {
	if !p.IsSetE() {
		return IErrorArgs_E_DEFAULT
	}
	return p.E
}
func (p *IErrorArgs) IsSetE() bool {
	return p.E != nil
}

func (p *IErrorArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IErrorArgs) readField1(iprot thrift.TProtocol) error {
	p.E = &Error{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *IErrorArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("error_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IErrorArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
	}
	if err := p.E.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
	}
	return err
}

func (p *IErrorArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IErrorArgs(%+v)", *p)
}

type ILogoutArgs struct {
}

func NewILogoutArgs() *ILogoutArgs {
	return &ILogoutArgs{}
}

func (p *ILogoutArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ILogoutArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("logout_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ILogoutArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ILogoutArgs(%+v)", *p)
}

// Attributes:
//  - Tid
//  - Auth
type IRegistArgs struct {
	Tid  *Tid   `thrift:"tid,1" json:"tid"`
	Auth string `thrift:"auth,2" json:"auth"`
}

func NewIRegistArgs() *IRegistArgs {
	return &IRegistArgs{}
}

var IRegistArgs_Tid_DEFAULT *Tid

func (p *IRegistArgs) GetTid() *Tid {
	if !p.IsSetTid() {
		return IRegistArgs_Tid_DEFAULT
	}
	return p.Tid
}

func (p *IRegistArgs) GetAuth() string {
	return p.Auth
}
func (p *IRegistArgs) IsSetTid() bool {
	return p.Tid != nil
}

func (p *IRegistArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IRegistArgs) readField1(iprot thrift.TProtocol) error {
	p.Tid = &Tid{}
	if err := p.Tid.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tid), err)
	}
	return nil
}

func (p *IRegistArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Auth = v
	}
	return nil
}

func (p *IRegistArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("regist_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IRegistArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tid", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tid: ", p), err)
	}
	if err := p.Tid.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tid), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tid: ", p), err)
	}
	return err
}

func (p *IRegistArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("auth", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:auth: ", p), err)
	}
	if err := oprot.WriteString(string(p.Auth)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.auth (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:auth: ", p), err)
	}
	return err
}

func (p *IRegistArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IRegistArgs(%+v)", *p)
}

// Attributes:
//  - Roster
type IRoserArgs struct {
	Roster *Roster `thrift:"roster,1" json:"roster"`
}

func NewIRoserArgs() *IRoserArgs {
	return &IRoserArgs{}
}

var IRoserArgs_Roster_DEFAULT *Roster

func (p *IRoserArgs) GetRoster() *Roster {
	if !p.IsSetRoster() {
		return IRoserArgs_Roster_DEFAULT
	}
	return p.Roster
}
func (p *IRoserArgs) IsSetRoster() bool {
	return p.Roster != nil
}

func (p *IRoserArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IRoserArgs) readField1(iprot thrift.TProtocol) error {
	p.Roster = &Roster{}
	if err := p.Roster.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Roster), err)
	}
	return nil
}

func (p *IRoserArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("roser_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IRoserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roster", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:roster: ", p), err)
	}
	if err := p.Roster.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Roster), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:roster: ", p), err)
	}
	return err
}

func (p *IRoserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IRoserArgs(%+v)", *p)
}

// Attributes:
//  - MbeanList
type IMessageListArgs struct {
	MbeanList *MBeanList `thrift:"mbeanList,1" json:"mbeanList"`
}

func NewIMessageListArgs() *IMessageListArgs {
	return &IMessageListArgs{}
}

var IMessageListArgs_MbeanList_DEFAULT *MBeanList

func (p *IMessageListArgs) GetMbeanList() *MBeanList {
	if !p.IsSetMbeanList() {
		return IMessageListArgs_MbeanList_DEFAULT
	}
	return p.MbeanList
}
func (p *IMessageListArgs) IsSetMbeanList() bool {
	return p.MbeanList != nil
}

func (p *IMessageListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IMessageListArgs) readField1(iprot thrift.TProtocol) error {
	p.MbeanList = &MBeanList{}
	if err := p.MbeanList.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MbeanList), err)
	}
	return nil
}

func (p *IMessageListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("messageList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IMessageListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mbeanList", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mbeanList: ", p), err)
	}
	if err := p.MbeanList.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MbeanList), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mbeanList: ", p), err)
	}
	return err
}

func (p *IMessageListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IMessageListArgs(%+v)", *p)
}

// Attributes:
//  - PbeanList
type IPresenceListArgs struct {
	PbeanList *PBeanList `thrift:"pbeanList,1" json:"pbeanList"`
}

func NewIPresenceListArgs() *IPresenceListArgs {
	return &IPresenceListArgs{}
}

var IPresenceListArgs_PbeanList_DEFAULT *PBeanList

func (p *IPresenceListArgs) GetPbeanList() *PBeanList {
	if !p.IsSetPbeanList() {
		return IPresenceListArgs_PbeanList_DEFAULT
	}
	return p.PbeanList
}
func (p *IPresenceListArgs) IsSetPbeanList() bool {
	return p.PbeanList != nil
}

func (p *IPresenceListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IPresenceListArgs) readField1(iprot thrift.TProtocol) error {
	p.PbeanList = &PBeanList{}
	if err := p.PbeanList.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PbeanList), err)
	}
	return nil
}

func (p *IPresenceListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("presenceList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IPresenceListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pbeanList", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pbeanList: ", p), err)
	}
	if err := p.PbeanList.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PbeanList), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pbeanList: ", p), err)
	}
	return err
}

func (p *IPresenceListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IPresenceListArgs(%+v)", *p)
}

// Attributes:
//  - msgIq
//  - IqType
type IMessageIqArgs struct {
	msgIq  *MessageIq `thrift:"msgIq,1" json:"msgIq"`
	IqType string     `thrift:"iqType,2" json:"iqType"`
}

func NewIMessageIqArgs() *IMessageIqArgs {
	return &IMessageIqArgs{}
}

var IMessageIqArgs_msgIq_DEFAULT *MessageIq

func (p *IMessageIqArgs) GetMsgIq() *MessageIq {
	if !p.IsSetMsgIq() {
		return IMessageIqArgs_msgIq_DEFAULT
	}
	return p.msgIq
}

func (p *IMessageIqArgs) GetIqType() string {
	return p.IqType
}
func (p *IMessageIqArgs) IsSetMsgIq() bool {
	return p.msgIq != nil
}

func (p *IMessageIqArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IMessageIqArgs) readField1(iprot thrift.TProtocol) error {
	p.msgIq = &MessageIq{}
	if err := p.msgIq.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.msgIq), err)
	}
	return nil
}

func (p *IMessageIqArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IqType = v
	}
	return nil
}

func (p *IMessageIqArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("messageIq_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IMessageIqArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msgIq", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:msgIq: ", p), err)
	}
	if err := p.msgIq.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.msgIq), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:msgIq: ", p), err)
	}
	return err
}

func (p *IMessageIqArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("iqType", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:iqType: ", p), err)
	}
	if err := oprot.WriteString(string(p.IqType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.iqType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:iqType: ", p), err)
	}
	return err
}

func (p *IMessageIqArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IMessageIqArgs(%+v)", *p)
}

// Attributes:
//  - Mbean
type IMessageResultArgs struct {
	Mbean *MBean `thrift:"mbean,1" json:"mbean"`
}

func NewIMessageResultArgs() *IMessageResultArgs {
	return &IMessageResultArgs{}
}

var IMessageResultArgs_Mbean_DEFAULT *MBean

func (p *IMessageResultArgs) GetMbean() *MBean {
	if !p.IsSetMbean() {
		return IMessageResultArgs_Mbean_DEFAULT
	}
	return p.Mbean
}
func (p *IMessageResultArgs) IsSetMbean() bool {
	return p.Mbean != nil
}

func (p *IMessageResultArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IMessageResultArgs) readField1(iprot thrift.TProtocol) error {
	p.Mbean = &MBean{}
	if err := p.Mbean.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Mbean), err)
	}
	return nil
}

func (p *IMessageResultArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("messageResult_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IMessageResultArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mbean", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mbean: ", p), err)
	}
	if err := p.Mbean.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Mbean), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mbean: ", p), err)
	}
	return err
}

func (p *IMessageResultArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IMessageResultArgs(%+v)", *p)
}

// Attributes:
//  - Tpb
type IPropertyArgs struct {
	Tpb *PropertyBean `thrift:"tpb,1" json:"tpb"`
}

func NewIPropertyArgs() *IPropertyArgs {
	return &IPropertyArgs{}
}

var IPropertyArgs_Tpb_DEFAULT *PropertyBean

func (p *IPropertyArgs) GetTpb() *PropertyBean {
	if !p.IsSetTpb() {
		return IPropertyArgs_Tpb_DEFAULT
	}
	return p.Tpb
}
func (p *IPropertyArgs) IsSetTpb() bool {
	return p.Tpb != nil
}

func (p *IPropertyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IPropertyArgs) readField1(iprot thrift.TProtocol) error {
	p.Tpb = &PropertyBean{}
	if err := p.Tpb.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tpb), err)
	}
	return nil
}

func (p *IPropertyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("property_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IPropertyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tpb", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tpb: ", p), err)
	}
	if err := p.Tpb.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tpb), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tpb: ", p), err)
	}
	return err
}

func (p *IPropertyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IPropertyArgs(%+v)", *p)
}

// Attributes:
//  - Tid
//  - Pwd
//  - Auth
type IRemoteUserAuthArgs struct {
	Tid  *Tid    `thrift:"tid,1" json:"tid"`
	Pwd  string  `thrift:"pwd,2" json:"pwd"`
	Auth *MyAuth `thrift:"auth,3" json:"auth"`
}

func NewIRemoteUserAuthArgs() *IRemoteUserAuthArgs {
	return &IRemoteUserAuthArgs{}
}

var IRemoteUserAuthArgs_Tid_DEFAULT *Tid

func (p *IRemoteUserAuthArgs) GetTid() *Tid {
	if !p.IsSetTid() {
		return IRemoteUserAuthArgs_Tid_DEFAULT
	}
	return p.Tid
}

func (p *IRemoteUserAuthArgs) GetPwd() string {
	return p.Pwd
}

var IRemoteUserAuthArgs_Auth_DEFAULT *MyAuth

func (p *IRemoteUserAuthArgs) GetAuth() *MyAuth {
	if !p.IsSetAuth() {
		return IRemoteUserAuthArgs_Auth_DEFAULT
	}
	return p.Auth
}
func (p *IRemoteUserAuthArgs) IsSetTid() bool {
	return p.Tid != nil
}

func (p *IRemoteUserAuthArgs) IsSetAuth() bool {
	return p.Auth != nil
}

func (p *IRemoteUserAuthArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IRemoteUserAuthArgs) readField1(iprot thrift.TProtocol) error {
	p.Tid = &Tid{}
	if err := p.Tid.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tid), err)
	}
	return nil
}

func (p *IRemoteUserAuthArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Pwd = v
	}
	return nil
}

func (p *IRemoteUserAuthArgs) readField3(iprot thrift.TProtocol) error {
	p.Auth = &MyAuth{}
	if err := p.Auth.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Auth), err)
	}
	return nil
}

func (p *IRemoteUserAuthArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("remoteUserAuth_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IRemoteUserAuthArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tid", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tid: ", p), err)
	}
	if err := p.Tid.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tid), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tid: ", p), err)
	}
	return err
}

func (p *IRemoteUserAuthArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pwd", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pwd: ", p), err)
	}
	if err := oprot.WriteString(string(p.Pwd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pwd (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pwd: ", p), err)
	}
	return err
}

func (p *IRemoteUserAuthArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("auth", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:auth: ", p), err)
	}
	if err := p.Auth.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Auth), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:auth: ", p), err)
	}
	return err
}

func (p *IRemoteUserAuthArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IRemoteUserAuthArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IRemoteUserAuthResult struct {
	Success *RemoteUserBean `thrift:"success,0" json:"success,omitempty"`
}

func NewIRemoteUserAuthResult() *IRemoteUserAuthResult {
	return &IRemoteUserAuthResult{}
}

var IRemoteUserAuthResult_Success_DEFAULT *RemoteUserBean

func (p *IRemoteUserAuthResult) GetSuccess() *RemoteUserBean {
	if !p.IsSetSuccess() {
		return IRemoteUserAuthResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IRemoteUserAuthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IRemoteUserAuthResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IRemoteUserAuthResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &RemoteUserBean{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IRemoteUserAuthResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("remoteUserAuth_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IRemoteUserAuthResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IRemoteUserAuthResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IRemoteUserAuthResult(%+v)", *p)
}

// Attributes:
//  - Tid
//  - Auth
type IRemoteUserGetArgs struct {
	Tid  *Tid    `thrift:"tid,1" json:"tid"`
	Auth *MyAuth `thrift:"auth,2" json:"auth"`
}

func NewIRemoteUserGetArgs() *IRemoteUserGetArgs {
	return &IRemoteUserGetArgs{}
}

var IRemoteUserGetArgs_Tid_DEFAULT *Tid

func (p *IRemoteUserGetArgs) GetTid() *Tid {
	if !p.IsSetTid() {
		return IRemoteUserGetArgs_Tid_DEFAULT
	}
	return p.Tid
}

var IRemoteUserGetArgs_Auth_DEFAULT *MyAuth

func (p *IRemoteUserGetArgs) GetAuth() *MyAuth {
	if !p.IsSetAuth() {
		return IRemoteUserGetArgs_Auth_DEFAULT
	}
	return p.Auth
}
func (p *IRemoteUserGetArgs) IsSetTid() bool {
	return p.Tid != nil
}

func (p *IRemoteUserGetArgs) IsSetAuth() bool {
	return p.Auth != nil
}

func (p *IRemoteUserGetArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IRemoteUserGetArgs) readField1(iprot thrift.TProtocol) error {
	p.Tid = &Tid{}
	if err := p.Tid.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tid), err)
	}
	return nil
}

func (p *IRemoteUserGetArgs) readField2(iprot thrift.TProtocol) error {
	p.Auth = &MyAuth{}
	if err := p.Auth.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Auth), err)
	}
	return nil
}

func (p *IRemoteUserGetArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("remoteUserGet_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IRemoteUserGetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tid", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tid: ", p), err)
	}
	if err := p.Tid.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tid), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tid: ", p), err)
	}
	return err
}

func (p *IRemoteUserGetArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("auth", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:auth: ", p), err)
	}
	if err := p.Auth.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Auth), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:auth: ", p), err)
	}
	return err
}

func (p *IRemoteUserGetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IRemoteUserGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IRemoteUserGetResult struct {
	Success *RemoteUserBean `thrift:"success,0" json:"success,omitempty"`
}

func NewIRemoteUserGetResult() *IRemoteUserGetResult {
	return &IRemoteUserGetResult{}
}

var IRemoteUserGetResult_Success_DEFAULT *RemoteUserBean

func (p *IRemoteUserGetResult) GetSuccess() *RemoteUserBean {
	if !p.IsSetSuccess() {
		return IRemoteUserGetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IRemoteUserGetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IRemoteUserGetResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IRemoteUserGetResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &RemoteUserBean{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IRemoteUserGetResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("remoteUserGet_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IRemoteUserGetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IRemoteUserGetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IRemoteUserGetResult(%+v)", *p)
}

// Attributes:
//  - Tid
//  - Ub
//  - Auth
type IRemoteUserEditArgs struct {
	Tid  *Tid      `thrift:"tid,1" json:"tid"`
	Ub   *UserBean `thrift:"ub,2" json:"ub"`
	Auth *MyAuth   `thrift:"auth,3" json:"auth"`
}

func NewIRemoteUserEditArgs() *IRemoteUserEditArgs {
	return &IRemoteUserEditArgs{}
}

var IRemoteUserEditArgs_Tid_DEFAULT *Tid

func (p *IRemoteUserEditArgs) GetTid() *Tid {
	if !p.IsSetTid() {
		return IRemoteUserEditArgs_Tid_DEFAULT
	}
	return p.Tid
}

var IRemoteUserEditArgs_Ub_DEFAULT *UserBean

func (p *IRemoteUserEditArgs) GetUb() *UserBean {
	if !p.IsSetUb() {
		return IRemoteUserEditArgs_Ub_DEFAULT
	}
	return p.Ub
}

var IRemoteUserEditArgs_Auth_DEFAULT *MyAuth

func (p *IRemoteUserEditArgs) GetAuth() *MyAuth {
	if !p.IsSetAuth() {
		return IRemoteUserEditArgs_Auth_DEFAULT
	}
	return p.Auth
}
func (p *IRemoteUserEditArgs) IsSetTid() bool {
	return p.Tid != nil
}

func (p *IRemoteUserEditArgs) IsSetUb() bool {
	return p.Ub != nil
}

func (p *IRemoteUserEditArgs) IsSetAuth() bool {
	return p.Auth != nil
}

func (p *IRemoteUserEditArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IRemoteUserEditArgs) readField1(iprot thrift.TProtocol) error {
	p.Tid = &Tid{}
	if err := p.Tid.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tid), err)
	}
	return nil
}

func (p *IRemoteUserEditArgs) readField2(iprot thrift.TProtocol) error {
	p.Ub = &UserBean{}
	if err := p.Ub.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ub), err)
	}
	return nil
}

func (p *IRemoteUserEditArgs) readField3(iprot thrift.TProtocol) error {
	p.Auth = &MyAuth{}
	if err := p.Auth.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Auth), err)
	}
	return nil
}

func (p *IRemoteUserEditArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("remoteUserEdit_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IRemoteUserEditArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tid", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tid: ", p), err)
	}
	if err := p.Tid.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tid), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tid: ", p), err)
	}
	return err
}

func (p *IRemoteUserEditArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ub", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ub: ", p), err)
	}
	if err := p.Ub.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ub), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ub: ", p), err)
	}
	return err
}

func (p *IRemoteUserEditArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("auth", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:auth: ", p), err)
	}
	if err := p.Auth.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Auth), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:auth: ", p), err)
	}
	return err
}

func (p *IRemoteUserEditArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IRemoteUserEditArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IRemoteUserEditResult struct {
	Success *RemoteUserBean `thrift:"success,0" json:"success,omitempty"`
}

func NewIRemoteUserEditResult() *IRemoteUserEditResult {
	return &IRemoteUserEditResult{}
}

var IRemoteUserEditResult_Success_DEFAULT *RemoteUserBean

func (p *IRemoteUserEditResult) GetSuccess() *RemoteUserBean {
	if !p.IsSetSuccess() {
		return IRemoteUserEditResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IRemoteUserEditResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IRemoteUserEditResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IRemoteUserEditResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &RemoteUserBean{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IRemoteUserEditResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("remoteUserEdit_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IRemoteUserEditResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IRemoteUserEditResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IRemoteUserEditResult(%+v)", *p)
}

// Attributes:
//  - Pbean
//  - Auth
type IResponsePresenceArgs struct {
	Pbean *PBean  `thrift:"pbean,1" json:"pbean"`
	Auth  *MyAuth `thrift:"auth,2" json:"auth"`
}

func NewIResponsePresenceArgs() *IResponsePresenceArgs {
	return &IResponsePresenceArgs{}
}

var IResponsePresenceArgs_Pbean_DEFAULT *PBean

func (p *IResponsePresenceArgs) GetPbean() *PBean {
	if !p.IsSetPbean() {
		return IResponsePresenceArgs_Pbean_DEFAULT
	}
	return p.Pbean
}

var IResponsePresenceArgs_Auth_DEFAULT *MyAuth

func (p *IResponsePresenceArgs) GetAuth() *MyAuth {
	if !p.IsSetAuth() {
		return IResponsePresenceArgs_Auth_DEFAULT
	}
	return p.Auth
}
func (p *IResponsePresenceArgs) IsSetPbean() bool {
	return p.Pbean != nil
}

func (p *IResponsePresenceArgs) IsSetAuth() bool {
	return p.Auth != nil
}

func (p *IResponsePresenceArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IResponsePresenceArgs) readField1(iprot thrift.TProtocol) error {
	p.Pbean = &PBean{}
	if err := p.Pbean.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Pbean), err)
	}
	return nil
}

func (p *IResponsePresenceArgs) readField2(iprot thrift.TProtocol) error {
	p.Auth = &MyAuth{}
	if err := p.Auth.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Auth), err)
	}
	return nil
}

func (p *IResponsePresenceArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("responsePresence_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IResponsePresenceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pbean", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pbean: ", p), err)
	}
	if err := p.Pbean.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Pbean), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pbean: ", p), err)
	}
	return err
}

func (p *IResponsePresenceArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("auth", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:auth: ", p), err)
	}
	if err := p.Auth.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Auth), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:auth: ", p), err)
	}
	return err
}

func (p *IResponsePresenceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IResponsePresenceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IResponsePresenceResult struct {
	Success *ResponseBean `thrift:"success,0" json:"success,omitempty"`
}

func NewIResponsePresenceResult() *IResponsePresenceResult {
	return &IResponsePresenceResult{}
}

var IResponsePresenceResult_Success_DEFAULT *ResponseBean

func (p *IResponsePresenceResult) GetSuccess() *ResponseBean {
	if !p.IsSetSuccess() {
		return IResponsePresenceResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IResponsePresenceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IResponsePresenceResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IResponsePresenceResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ResponseBean{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IResponsePresenceResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("responsePresence_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IResponsePresenceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IResponsePresenceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IResponsePresenceResult(%+v)", *p)
}

// Attributes:
//  - Mbean
//  - Auth
type IResponseMessageArgs struct {
	Mbean *MBean  `thrift:"mbean,1" json:"mbean"`
	Auth  *MyAuth `thrift:"auth,2" json:"auth"`
}

func NewIResponseMessageArgs() *IResponseMessageArgs {
	return &IResponseMessageArgs{}
}

var IResponseMessageArgs_Mbean_DEFAULT *MBean

func (p *IResponseMessageArgs) GetMbean() *MBean {
	if !p.IsSetMbean() {
		return IResponseMessageArgs_Mbean_DEFAULT
	}
	return p.Mbean
}

var IResponseMessageArgs_Auth_DEFAULT *MyAuth

func (p *IResponseMessageArgs) GetAuth() *MyAuth {
	if !p.IsSetAuth() {
		return IResponseMessageArgs_Auth_DEFAULT
	}
	return p.Auth
}
func (p *IResponseMessageArgs) IsSetMbean() bool {
	return p.Mbean != nil
}

func (p *IResponseMessageArgs) IsSetAuth() bool {
	return p.Auth != nil
}

func (p *IResponseMessageArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IResponseMessageArgs) readField1(iprot thrift.TProtocol) error {
	p.Mbean = &MBean{}
	if err := p.Mbean.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Mbean), err)
	}
	return nil
}

func (p *IResponseMessageArgs) readField2(iprot thrift.TProtocol) error {
	p.Auth = &MyAuth{}
	if err := p.Auth.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Auth), err)
	}
	return nil
}

func (p *IResponseMessageArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("responseMessage_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IResponseMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mbean", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mbean: ", p), err)
	}
	if err := p.Mbean.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Mbean), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mbean: ", p), err)
	}
	return err
}

func (p *IResponseMessageArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("auth", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:auth: ", p), err)
	}
	if err := p.Auth.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Auth), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:auth: ", p), err)
	}
	return err
}

func (p *IResponseMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IResponseMessageArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IResponseMessageResult struct {
	Success *ResponseBean `thrift:"success,0" json:"success,omitempty"`
}

func NewIResponseMessageResult() *IResponseMessageResult {
	return &IResponseMessageResult{}
}

var IResponseMessageResult_Success_DEFAULT *ResponseBean

func (p *IResponseMessageResult) GetSuccess() *ResponseBean {
	if !p.IsSetSuccess() {
		return IResponseMessageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IResponseMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IResponseMessageResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IResponseMessageResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ResponseBean{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IResponseMessageResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("responseMessage_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IResponseMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IResponseMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IResponseMessageResult(%+v)", *p)
}

// Attributes:
//  - msgIq
//  - IqType
//  - Auth
type IResponseMessageIqArgs struct {
	msgIq  *MessageIq `thrift:"msgIq,1" json:"msgIq"`
	IqType string     `thrift:"iqType,2" json:"iqType"`
	Auth   *MyAuth    `thrift:"auth,3" json:"auth"`
}

func NewIResponseMessageIqArgs() *IResponseMessageIqArgs {
	return &IResponseMessageIqArgs{}
}

var IResponseMessageIqArgs_msgIq_DEFAULT *MessageIq

func (p *IResponseMessageIqArgs) GetMsgIq() *MessageIq {
	if !p.IsSetMsgIq() {
		return IResponseMessageIqArgs_msgIq_DEFAULT
	}
	return p.msgIq
}

func (p *IResponseMessageIqArgs) GetIqType() string {
	return p.IqType
}

var IResponseMessageIqArgs_Auth_DEFAULT *MyAuth

func (p *IResponseMessageIqArgs) GetAuth() *MyAuth {
	if !p.IsSetAuth() {
		return IResponseMessageIqArgs_Auth_DEFAULT
	}
	return p.Auth
}
func (p *IResponseMessageIqArgs) IsSetMsgIq() bool {
	return p.msgIq != nil
}

func (p *IResponseMessageIqArgs) IsSetAuth() bool {
	return p.Auth != nil
}

func (p *IResponseMessageIqArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IResponseMessageIqArgs) readField1(iprot thrift.TProtocol) error {
	p.msgIq = &MessageIq{}
	if err := p.msgIq.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.msgIq), err)
	}
	return nil
}

func (p *IResponseMessageIqArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IqType = v
	}
	return nil
}

func (p *IResponseMessageIqArgs) readField3(iprot thrift.TProtocol) error {
	p.Auth = &MyAuth{}
	if err := p.Auth.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Auth), err)
	}
	return nil
}

func (p *IResponseMessageIqArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("responseMessageIq_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IResponseMessageIqArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msgIq", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:msgIq: ", p), err)
	}
	if err := p.msgIq.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.msgIq), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:msgIq: ", p), err)
	}
	return err
}

func (p *IResponseMessageIqArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("iqType", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:iqType: ", p), err)
	}
	if err := oprot.WriteString(string(p.IqType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.iqType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:iqType: ", p), err)
	}
	return err
}

func (p *IResponseMessageIqArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("auth", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:auth: ", p), err)
	}
	if err := p.Auth.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Auth), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:auth: ", p), err)
	}
	return err
}

func (p *IResponseMessageIqArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IResponseMessageIqArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IResponseMessageIqResult struct {
	Success *MBeanList `thrift:"success,0" json:"success,omitempty"`
}

func NewIResponseMessageIqResult() *IResponseMessageIqResult {
	return &IResponseMessageIqResult{}
}

var IResponseMessageIqResult_Success_DEFAULT *MBeanList

func (p *IResponseMessageIqResult) GetSuccess() *MBeanList {
	if !p.IsSetSuccess() {
		return IResponseMessageIqResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IResponseMessageIqResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IResponseMessageIqResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IResponseMessageIqResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &MBeanList{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IResponseMessageIqResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("responseMessageIq_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IResponseMessageIqResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IResponseMessageIqResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IResponseMessageIqResult(%+v)", *p)
}

// Attributes:
//  - PbeanList
//  - Auth
type IResponsePresenceListArgs struct {
	PbeanList *PBeanList `thrift:"pbeanList,1" json:"pbeanList"`
	Auth      *MyAuth    `thrift:"auth,2" json:"auth"`
}

func NewIResponsePresenceListArgs() *IResponsePresenceListArgs {
	return &IResponsePresenceListArgs{}
}

var IResponsePresenceListArgs_PbeanList_DEFAULT *PBeanList

func (p *IResponsePresenceListArgs) GetPbeanList() *PBeanList {
	if !p.IsSetPbeanList() {
		return IResponsePresenceListArgs_PbeanList_DEFAULT
	}
	return p.PbeanList
}

var IResponsePresenceListArgs_Auth_DEFAULT *MyAuth

func (p *IResponsePresenceListArgs) GetAuth() *MyAuth {
	if !p.IsSetAuth() {
		return IResponsePresenceListArgs_Auth_DEFAULT
	}
	return p.Auth
}
func (p *IResponsePresenceListArgs) IsSetPbeanList() bool {
	return p.PbeanList != nil
}

func (p *IResponsePresenceListArgs) IsSetAuth() bool {
	return p.Auth != nil
}

func (p *IResponsePresenceListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IResponsePresenceListArgs) readField1(iprot thrift.TProtocol) error {
	p.PbeanList = &PBeanList{}
	if err := p.PbeanList.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PbeanList), err)
	}
	return nil
}

func (p *IResponsePresenceListArgs) readField2(iprot thrift.TProtocol) error {
	p.Auth = &MyAuth{}
	if err := p.Auth.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Auth), err)
	}
	return nil
}

func (p *IResponsePresenceListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("responsePresenceList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IResponsePresenceListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pbeanList", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pbeanList: ", p), err)
	}
	if err := p.PbeanList.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PbeanList), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pbeanList: ", p), err)
	}
	return err
}

func (p *IResponsePresenceListArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("auth", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:auth: ", p), err)
	}
	if err := p.Auth.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Auth), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:auth: ", p), err)
	}
	return err
}

func (p *IResponsePresenceListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IResponsePresenceListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IResponsePresenceListResult struct {
	Success *ResponseBean `thrift:"success,0" json:"success,omitempty"`
}

func NewIResponsePresenceListResult() *IResponsePresenceListResult {
	return &IResponsePresenceListResult{}
}

var IResponsePresenceListResult_Success_DEFAULT *ResponseBean

func (p *IResponsePresenceListResult) GetSuccess() *ResponseBean {
	if !p.IsSetSuccess() {
		return IResponsePresenceListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IResponsePresenceListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IResponsePresenceListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IResponsePresenceListResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ResponseBean{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IResponsePresenceListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("responsePresenceList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IResponsePresenceListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IResponsePresenceListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IResponsePresenceListResult(%+v)", *p)
}

// Attributes:
//  - MbeanList
//  - Auth
type IResponseMessageListArgs struct {
	MbeanList *MBeanList `thrift:"mbeanList,1" json:"mbeanList"`
	Auth      *MyAuth    `thrift:"auth,2" json:"auth"`
}

func NewIResponseMessageListArgs() *IResponseMessageListArgs {
	return &IResponseMessageListArgs{}
}

var IResponseMessageListArgs_MbeanList_DEFAULT *MBeanList

func (p *IResponseMessageListArgs) GetMbeanList() *MBeanList {
	if !p.IsSetMbeanList() {
		return IResponseMessageListArgs_MbeanList_DEFAULT
	}
	return p.MbeanList
}

var IResponseMessageListArgs_Auth_DEFAULT *MyAuth

func (p *IResponseMessageListArgs) GetAuth() *MyAuth {
	if !p.IsSetAuth() {
		return IResponseMessageListArgs_Auth_DEFAULT
	}
	return p.Auth
}
func (p *IResponseMessageListArgs) IsSetMbeanList() bool {
	return p.MbeanList != nil
}

func (p *IResponseMessageListArgs) IsSetAuth() bool {
	return p.Auth != nil
}

func (p *IResponseMessageListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IResponseMessageListArgs) readField1(iprot thrift.TProtocol) error {
	p.MbeanList = &MBeanList{}
	if err := p.MbeanList.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MbeanList), err)
	}
	return nil
}

func (p *IResponseMessageListArgs) readField2(iprot thrift.TProtocol) error {
	p.Auth = &MyAuth{}
	if err := p.Auth.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Auth), err)
	}
	return nil
}

func (p *IResponseMessageListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("responseMessageList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IResponseMessageListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mbeanList", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mbeanList: ", p), err)
	}
	if err := p.MbeanList.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MbeanList), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mbeanList: ", p), err)
	}
	return err
}

func (p *IResponseMessageListArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("auth", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:auth: ", p), err)
	}
	if err := p.Auth.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Auth), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:auth: ", p), err)
	}
	return err
}

func (p *IResponseMessageListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IResponseMessageListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IResponseMessageListResult struct {
	Success *ResponseBean `thrift:"success,0" json:"success,omitempty"`
}

func NewIResponseMessageListResult() *IResponseMessageListResult {
	return &IResponseMessageListResult{}
}

var IResponseMessageListResult_Success_DEFAULT *ResponseBean

func (p *IResponseMessageListResult) GetSuccess() *ResponseBean {
	if !p.IsSetSuccess() {
		return IResponseMessageListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IResponseMessageListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IResponseMessageListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IResponseMessageListResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ResponseBean{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IResponseMessageListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("responseMessageList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IResponseMessageListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IResponseMessageListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IResponseMessageListResult(%+v)", *p)
}
